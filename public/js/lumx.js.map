{"version":3,"sources":["/bower_components/lumx/dist/lumx.js"],"names":[],"mappingsfile":"lumx.js","sourcesContent":["/*\n LumX 1.4.0\n (c) 2014-2017 LumApps http://ui.lumapps.com\n License: MIT\n*/\n(function()\n{\n    'use strict';\n\n    angular.module('lumx.utils.depth', []);\n    angular.module('lumx.utils.event-scheduler', []);\n    angular.module('lumx.utils.transclude-replace', []);\n    angular.module('lumx.utils.utils', []);\n\n    angular.module('lumx.utils', [\n        'lumx.utils.depth',\n        'lumx.utils.event-scheduler',\n        'lumx.utils.transclude-replace',\n        'lumx.utils.utils'\n    ]);\n\n    angular.module('lumx.button', []);\n    angular.module('lumx.checkbox', []);\n    angular.module('lumx.data-table', []);\n    angular.module('lumx.date-picker', []);\n    angular.module('lumx.dialog', ['lumx.utils.event-scheduler']);\n    angular.module('lumx.dropdown', ['lumx.utils.event-scheduler']);\n    angular.module('lumx.fab', []);\n    angular.module('lumx.file-input', []);\n    angular.module('lumx.icon', []);\n    angular.module('lumx.notification', ['lumx.utils.event-scheduler']);\n    angular.module('lumx.progress', []);\n    angular.module('lumx.radio-button', []);\n    angular.module('lumx.ripple', []);\n    angular.module('lumx.search-filter', []);\n    angular.module('lumx.select', []);\n    angular.module('lumx.switch', []);\n    angular.module('lumx.tabs', []);\n    angular.module('lumx.text-field', []);\n    angular.module('lumx.tooltip', []);\n\n    angular.module('lumx', [\n        'lumx.button',\n        'lumx.checkbox',\n        'lumx.data-table',\n        'lumx.date-picker',\n        'lumx.dialog',\n        'lumx.dropdown',\n        'lumx.fab',\n        'lumx.file-input',\n        'lumx.icon',\n        'lumx.notification',\n        'lumx.progress',\n        'lumx.radio-button',\n        'lumx.ripple',\n        'lumx.search-filter',\n        'lumx.select',\n        'lumx.switch',\n        'lumx.tabs',\n        'lumx.text-field',\n        'lumx.tooltip',\n        'lumx.utils'\n    ]);\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.utils.depth')\n        .service('LxDepthService', LxDepthService);\n\n    function LxDepthService()\n    {\n        var service = this;\n        var depth = 1000;\n\n        service.getDepth = getDepth;\n        service.register = register;\n\n        ////////////\n\n        function getDepth()\n        {\n            return depth;\n        }\n\n        function register()\n        {\n            depth++;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.utils.event-scheduler')\n        .service('LxEventSchedulerService', LxEventSchedulerService);\n\n    LxEventSchedulerService.$inject = ['$document', 'LxUtils'];\n\n    function LxEventSchedulerService($document, LxUtils)\n    {\n        var service = this;\n        var handlers = {};\n        var schedule = {};\n\n        service.register = register;\n        service.unregister = unregister;\n\n        ////////////\n\n        function handle(event)\n        {\n            var scheduler = schedule[event.type];\n\n            if (angular.isDefined(scheduler))\n            {\n                for (var i = 0, length = scheduler.length; i < length; i++)\n                {\n                    var handler = scheduler[i];\n\n                    if (angular.isDefined(handler) && angular.isDefined(handler.callback) && angular.isFunction(handler.callback))\n                    {\n                        handler.callback(event);\n\n                        if (event.isPropagationStopped())\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        function register(eventName, callback)\n        {\n            var handler = {\n                eventName: eventName,\n                callback: callback\n            };\n\n            var id = LxUtils.generateUUID();\n            handlers[id] = handler;\n\n            if (angular.isUndefined(schedule[eventName]))\n            {\n                schedule[eventName] = [];\n\n                $document.on(eventName, handle);\n            }\n            schedule[eventName].unshift(handlers[id]);\n\n            return id;\n        }\n\n        function unregister(id)\n        {\n            var found = false;\n            var handler = handlers[id];\n\n            if (angular.isDefined(handler) && angular.isDefined(schedule[handler.eventName]))\n            {\n                var index = schedule[handler.eventName].indexOf(handler);\n\n                if (angular.isDefined(index) && index > -1)\n                {\n                    schedule[handler.eventName].splice(index, 1);\n\n                    delete handlers[id];\n                    found = true;\n                }\n\n                if (schedule[handler.eventName].length === 0)\n                {\n                    delete schedule[handler.eventName];\n\n                    $document.off(handler.eventName, handle);\n                }\n            }\n\n            return found;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.utils.transclude-replace')\n        .directive('ngTranscludeReplace', ngTranscludeReplace);\n\n    ngTranscludeReplace.$inject = ['$log'];\n\n    function ngTranscludeReplace($log)\n    {\n        return {\n            terminal: true,\n            restrict: 'EA',\n            link: link\n        };\n\n        function link(scope, element, attrs, ctrl, transclude)\n        {\n            if (!transclude)\n            {\n                $log.error('orphan',\n                    'Illegal use of ngTranscludeReplace directive in the template! ' +\n                    'No parent directive that requires a transclusion found. ');\n                return;\n            }\n\n            transclude(function(clone)\n            {\n                if (clone.length)\n                {\n                    element.replaceWith(clone);\n                }\n                else\n                {\n                    element.remove();\n                }\n            });\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.utils.utils')\n        .service('LxUtils', LxUtils);\n\n    function LxUtils()\n    {\n        var service = this;\n\n        service.generateUUID = generateUUID;\n\n        ////////////\n\n        function generateUUID()\n        {\n            var d = new Date().getTime();\n\n            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n            {\n                var r = (d + Math.random() * 16) % 16 | 0;\n                d = Math.floor(d / 16);\n                return (c == 'x' ? r : (r & 0x3 | 0x8))\n                    .toString(16);\n            });\n\n            return uuid.toUpperCase();\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.button')\n        .directive('lxButton', lxButton);\n\n    function lxButton()\n    {\n        var buttonClass;\n\n        return {\n            restrict: 'E',\n            templateUrl: getTemplateUrl,\n            compile: compile,\n            replace: true,\n            transclude: true\n        };\n\n        function compile(element, attrs)\n        {\n            setButtonStyle(element, attrs.lxSize, attrs.lxColor, attrs.lxType);\n\n            return function(scope, element, attrs)\n            {\n                attrs.$observe('lxSize', function(lxSize)\n                {\n                    setButtonStyle(element, lxSize, attrs.lxColor, attrs.lxType);\n                });\n\n                attrs.$observe('lxColor', function(lxColor)\n                {\n                    setButtonStyle(element, attrs.lxSize, lxColor, attrs.lxType);\n                });\n\n                attrs.$observe('lxType', function(lxType)\n                {\n                    setButtonStyle(element, attrs.lxSize, attrs.lxColor, lxType);\n                });\n\n                element.on('click', function(event)\n                {\n                    if (attrs.disabled === true)\n                    {\n                        event.preventDefault();\n                        event.stopImmediatePropagation();\n                    }\n                });\n            };\n        }\n\n        function getTemplateUrl(element, attrs)\n        {\n            return isAnchor(attrs) ? 'link.html' : 'button.html';\n        }\n\n        function isAnchor(attrs)\n        {\n            return angular.isDefined(attrs.href) || angular.isDefined(attrs.ngHref) || angular.isDefined(attrs.ngLink) || angular.isDefined(attrs.uiSref);\n        }\n\n        function setButtonStyle(element, size, color, type)\n        {\n            var buttonBase = 'btn';\n            var buttonSize = angular.isDefined(size) ? size : 'm';\n            var buttonColor = angular.isDefined(color) ? color : 'primary';\n            var buttonType = angular.isDefined(type) ? type : 'raised';\n\n            element.removeClass(buttonClass);\n\n            buttonClass = buttonBase + ' btn--' + buttonSize + ' btn--' + buttonColor + ' btn--' + buttonType;\n\n            element.addClass(buttonClass);\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.checkbox')\n        .directive('lxCheckbox', lxCheckbox)\n        .directive('lxCheckboxLabel', lxCheckboxLabel)\n        .directive('lxCheckboxHelp', lxCheckboxHelp);\n\n    function lxCheckbox()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'checkbox.html',\n            scope:\n            {\n                lxColor: '@?',\n                name: '@?',\n                ngChange: '&?',\n                ngDisabled: '=?',\n                ngFalseValue: '@?',\n                ngModel: '=',\n                ngTrueValue: '@?'\n            },\n            controller: LxCheckboxController,\n            controllerAs: 'lxCheckbox',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n    }\n\n    LxCheckboxController.$inject = ['$scope', '$timeout', 'LxUtils'];\n\n    function LxCheckboxController($scope, $timeout, LxUtils)\n    {\n        var lxCheckbox = this;\n        var checkboxId;\n        var checkboxHasChildren;\n        var timer;\n\n        lxCheckbox.getCheckboxId = getCheckboxId;\n        lxCheckbox.getCheckboxHasChildren = getCheckboxHasChildren;\n        lxCheckbox.setCheckboxId = setCheckboxId;\n        lxCheckbox.setCheckboxHasChildren = setCheckboxHasChildren;\n        lxCheckbox.triggerNgChange = triggerNgChange;\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer);\n        });\n\n        init();\n\n        ////////////\n\n        function getCheckboxId()\n        {\n            return checkboxId;\n        }\n\n        function getCheckboxHasChildren()\n        {\n            return checkboxHasChildren;\n        }\n\n        function init()\n        {\n            setCheckboxId(LxUtils.generateUUID());\n            setCheckboxHasChildren(false);\n\n            lxCheckbox.ngTrueValue = angular.isUndefined(lxCheckbox.ngTrueValue) ? true : lxCheckbox.ngTrueValue;\n            lxCheckbox.ngFalseValue = angular.isUndefined(lxCheckbox.ngFalseValue) ? false : lxCheckbox.ngFalseValue;\n            lxCheckbox.lxColor = angular.isUndefined(lxCheckbox.lxColor) ? 'accent' : lxCheckbox.lxColor;\n        }\n\n        function setCheckboxId(_checkboxId)\n        {\n            checkboxId = _checkboxId;\n        }\n\n        function setCheckboxHasChildren(_checkboxHasChildren)\n        {\n            checkboxHasChildren = _checkboxHasChildren;\n        }\n\n        function triggerNgChange()\n        {\n            timer = $timeout(lxCheckbox.ngChange);\n        }\n    }\n\n    function lxCheckboxLabel()\n    {\n        return {\n            restrict: 'AE',\n            require: ['^lxCheckbox', '^lxCheckboxLabel'],\n            templateUrl: 'checkbox-label.html',\n            link: link,\n            controller: LxCheckboxLabelController,\n            controllerAs: 'lxCheckboxLabel',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrls)\n        {\n            ctrls[0].setCheckboxHasChildren(true);\n            ctrls[1].setCheckboxId(ctrls[0].getCheckboxId());\n        }\n    }\n\n    function LxCheckboxLabelController()\n    {\n        var lxCheckboxLabel = this;\n        var checkboxId;\n\n        lxCheckboxLabel.getCheckboxId = getCheckboxId;\n        lxCheckboxLabel.setCheckboxId = setCheckboxId;\n\n        ////////////\n\n        function getCheckboxId()\n        {\n            return checkboxId;\n        }\n\n        function setCheckboxId(_checkboxId)\n        {\n            checkboxId = _checkboxId;\n        }\n    }\n\n    function lxCheckboxHelp()\n    {\n        return {\n            restrict: 'AE',\n            require: '^lxCheckbox',\n            templateUrl: 'checkbox-help.html',\n            transclude: true,\n            replace: true\n        };\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.data-table')\n        .directive('lxDataTable', lxDataTable);\n\n    function lxDataTable()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'data-table.html',\n            scope:\n            {\n                border: '=?lxBorder',\n                selectable: '=?lxSelectable',\n                thumbnail: '=?lxThumbnail',\n                tbody: '=lxTbody',\n                thead: '=lxThead'\n            },\n            link: link,\n            controller: LxDataTableController,\n            controllerAs: 'lxDataTable',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            attrs.$observe('id', function(_newId)\n            {\n                ctrl.id = _newId;\n            });\n        }\n    }\n\n    LxDataTableController.$inject = ['$rootScope', '$sce', '$scope'];\n\n    function LxDataTableController($rootScope, $sce, $scope)\n    {\n        var lxDataTable = this;\n\n        lxDataTable.areAllRowsSelected = areAllRowsSelected;\n        lxDataTable.border = angular.isUndefined(lxDataTable.border) ? true : lxDataTable.border;\n        lxDataTable.sort = sort;\n        lxDataTable.toggle = toggle;\n        lxDataTable.toggleAllSelected = toggleAllSelected;\n\n        lxDataTable.$sce = $sce;\n        lxDataTable.allRowsSelected = false;\n        lxDataTable.selectedRows = [];\n\n        $scope.$on('lx-data-table__select-all', function(event, id)\n        {\n            if (id === lxDataTable.id)\n            {\n                _selectAll();\n            }\n        });\n\n        $scope.$on('lx-data-table__unselect-all', function(event, id)\n        {\n            if (id === lxDataTable.id)\n            {\n                _unselectAll();\n            }\n        });\n\n        ////////////\n\n        function _selectAll()\n        {\n            lxDataTable.selectedRows.length = 0;\n\n            for (var i = 0, len = lxDataTable.tbody.length; i < len; i++)\n            {\n                if (!lxDataTable.tbody[i].lxDataTableDisabled)\n                {\n                    lxDataTable.tbody[i].lxDataTableSelected = true;\n                    lxDataTable.selectedRows.push(lxDataTable.tbody[i]);\n                }\n            }\n\n            lxDataTable.allRowsSelected = true;\n\n            $rootScope.$broadcast('lx-data-table__unselect', lxDataTable.selectedRows);\n        }\n\n        function _unselectAll()\n        {\n            for (var i = 0, len = lxDataTable.tbody.length; i < len; i++)\n            {\n                if (!lxDataTable.tbody[i].lxDataTableDisabled)\n                {\n                    lxDataTable.tbody[i].lxDataTableSelected = false;\n                }\n            }\n\n            lxDataTable.allRowsSelected = false;\n            lxDataTable.selectedRows.length = 0;\n\n            $rootScope.$broadcast('lx-data-table__select', lxDataTable.selectedRows);\n        }\n\n        ////////////\n\n        function areAllRowsSelected()\n        {\n            var displayedRows = 0;\n\n            for (var i = 0, len = lxDataTable.tbody.length; i < len; i++)\n            {\n                if (!lxDataTable.tbody[i].lxDataTableDisabled)\n                {\n                    displayedRows++;\n                }\n            }\n\n            if (displayedRows === lxDataTable.selectedRows.length)\n            {\n                lxDataTable.allRowsSelected = true;\n            }\n            else\n            {\n                lxDataTable.allRowsSelected = false;\n            }\n        }\n\n        function sort(_column)\n        {\n            if (!_column.sortable)\n            {\n                return;\n            }\n\n            for (var i = 0, len = lxDataTable.thead.length; i < len; i++)\n            {\n                if (lxDataTable.thead[i].sortable && lxDataTable.thead[i].name !== _column.name)\n                {\n                    lxDataTable.thead[i].sort = undefined;\n                }\n            }\n\n            if (!_column.sort || _column.sort === 'desc')\n            {\n                _column.sort = 'asc';\n            }\n            else\n            {\n                _column.sort = 'desc';\n            }\n\n            $rootScope.$broadcast('lx-data-table__sort', _column);\n        }\n\n        function toggle(_row)\n        {\n            if (_row.lxDataTableDisabled || !lxDataTable.selectable)\n            {\n                return;\n            }\n\n            _row.lxDataTableSelected = !_row.lxDataTableSelected;\n\n            if (_row.lxDataTableSelected)\n            {\n                lxDataTable.selectedRows.push(_row);\n                lxDataTable.areAllRowsSelected();\n\n                $rootScope.$broadcast('lx-data-table__select', lxDataTable.selectedRows);\n            }\n            else\n            {\n                if (lxDataTable.selectedRows.length)\n                {\n                    lxDataTable.selectedRows.splice(lxDataTable.selectedRows.indexOf(_row), 1);\n                }\n\n                lxDataTable.allRowsSelected = false;\n\n                $rootScope.$broadcast('lx-data-table__unselect', lxDataTable.selectedRows);\n            }\n        }\n\n        function toggleAllSelected()\n        {\n            if (lxDataTable.allRowsSelected)\n            {\n                _unselectAll();\n            }\n            else\n            {\n                _selectAll();\n            }\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.data-table')\n        .service('LxDataTableService', LxDataTableService);\n\n    LxDataTableService.$inject = ['$rootScope'];\n\n    function LxDataTableService($rootScope)\n    {\n        var service = this;\n\n        service.selectAll = selectAll;\n        service.unselectAll = unselectAll;\n\n        ////////////\n\n        function selectAll(_dataTableId)\n        {\n            $rootScope.$broadcast('lx-data-table__select-all', _dataTableId);\n        }\n\n        function unselectAll(_dataTableId)\n        {\n            $rootScope.$broadcast('lx-data-table__unselect-all', _dataTableId);\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.date-picker')\n        .directive('lxDatePicker', lxDatePicker);\n\n    lxDatePicker.$inject = ['LxDatePickerService', 'LxUtils'];\n\n    function lxDatePicker(LxDatePickerService, LxUtils)\n    {\n        return {\n            restrict: 'AE',\n            templateUrl: 'date-picker.html',\n            scope:\n            {\n                autoClose: '=?lxAutoClose',\n                callback: '&?lxCallback',\n                color: '@?lxColor',\n                escapeClose: '=?lxEscapeClose',\n                inputFormat: '@?lxInputFormat',\n                maxDate: '=?lxMaxDate',\n                ngModel: '=',\n                minDate: '=?lxMinDate',\n                locale: '@lxLocale'\n            },\n            link: link,\n            controller: LxDatePickerController,\n            controllerAs: 'lxDatePicker',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs)\n        {\n            if (angular.isDefined(attrs.id))\n            {\n                attrs.$observe('id', function(_newId)\n                {\n                    scope.lxDatePicker.pickerId = _newId;\n                    LxDatePickerService.registerScope(scope.lxDatePicker.pickerId, scope);\n                });\n            }\n            else\n            {\n                scope.lxDatePicker.pickerId = LxUtils.generateUUID();\n                LxDatePickerService.registerScope(scope.lxDatePicker.pickerId, scope);\n            }\n        }\n    }\n\n    LxDatePickerController.$inject = ['$element', '$scope', '$timeout', '$transclude', 'LxDatePickerService', 'LxUtils'];\n\n    function LxDatePickerController($element, $scope, $timeout, $transclude, LxDatePickerService, LxUtils)\n    {\n        var lxDatePicker = this;\n        var input;\n        var modelController;\n        var timer1;\n        var timer2;\n        var watcher1;\n        var watcher2;\n\n        lxDatePicker.closeDatePicker = closeDatePicker;\n        lxDatePicker.displayYearSelection = displayYearSelection;\n        lxDatePicker.hideYearSelection = hideYearSelection;\n        lxDatePicker.getDateFormatted = getDateFormatted;\n        lxDatePicker.nextMonth = nextMonth;\n        lxDatePicker.openDatePicker = openDatePicker;\n        lxDatePicker.previousMonth = previousMonth;\n        lxDatePicker.select = select;\n        lxDatePicker.selectYear = selectYear;\n\n        lxDatePicker.autoClose = angular.isDefined(lxDatePicker.autoClose) ? lxDatePicker.autoClose : true;\n        lxDatePicker.color = angular.isDefined(lxDatePicker.color) ? lxDatePicker.color : 'primary';\n        lxDatePicker.element = $element.find('.lx-date-picker');\n        lxDatePicker.escapeClose = angular.isDefined(lxDatePicker.escapeClose) ? lxDatePicker.escapeClose : true;\n        lxDatePicker.isOpen = false;\n        lxDatePicker.moment = moment;\n        lxDatePicker.yearSelection = false;\n        lxDatePicker.uuid = LxUtils.generateUUID();\n\n        $transclude(function(clone)\n        {\n            if (clone.length)\n            {\n                lxDatePicker.hasInput = true;\n\n                timer1 = $timeout(function()\n                {\n                    input = $element.find('.lx-date-input input');\n                    modelController = input.data('$ngModelController');\n\n                    watcher2 = $scope.$watch(function()\n                    {\n                        return modelController.$viewValue;\n                    }, function(newValue, oldValue)\n                    {\n                        if (angular.isUndefined(newValue))\n                        {\n                            lxDatePicker.ngModel = undefined;\n                        }\n                    });\n                });\n            }\n        });\n\n        watcher1 = $scope.$watch(function()\n        {\n            return lxDatePicker.ngModel;\n        }, init);\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer1);\n            $timeout.cancel(timer2);\n\n            if (angular.isFunction(watcher1))\n            {\n                watcher1();\n            }\n\n            if (angular.isFunction(watcher2))\n            {\n                watcher2();\n            }\n        });\n\n        ////////////\n\n        function closeDatePicker()\n        {\n            LxDatePickerService.close(lxDatePicker.pickerId);\n        }\n\n        function displayYearSelection()\n        {\n            lxDatePicker.yearSelection = true;\n\n            timer2 = $timeout(function()\n            {\n                var yearSelector = angular.element('.lx-date-picker__year-selector');\n                var activeYear = yearSelector.find('.lx-date-picker__year--is-active');\n\n                yearSelector.scrollTop(yearSelector.scrollTop() + activeYear.position().top - yearSelector.height() / 2 + activeYear.height() / 2);\n            });\n        }\n\n        function hideYearSelection()\n        {\n            lxDatePicker.yearSelection = false;\n        }\n\n        function generateCalendar()\n        {\n            lxDatePicker.days = [];\n\n            var previousDay = angular.copy(lxDatePicker.ngModelMoment).date(0);\n            var firstDayOfMonth = angular.copy(lxDatePicker.ngModelMoment).date(1);\n            var lastDayOfMonth = firstDayOfMonth.clone().endOf('month');\n            var maxDays = lastDayOfMonth.date();\n\n            lxDatePicker.emptyFirstDays = [];\n\n            for (var i = firstDayOfMonth.day() === 0 ? 6 : firstDayOfMonth.day() - 1; i > 0; i--)\n            {\n                lxDatePicker.emptyFirstDays.push(\n                {});\n            }\n\n            for (var j = 0; j < maxDays; j++)\n            {\n                var date = angular.copy(previousDay.add(1, 'days'));\n\n                date.selected = angular.isDefined(lxDatePicker.ngModel) && date.isSame(lxDatePicker.ngModel, 'day');\n                date.today = date.isSame(moment(), 'day');\n\n                if (angular.isDefined(lxDatePicker.minDate) && date.toDate() < lxDatePicker.minDate)\n                {\n                    date.disabled = true;\n                }\n\n                if (angular.isDefined(lxDatePicker.maxDate) && date.toDate() > lxDatePicker.maxDate)\n                {\n                    date.disabled = true;\n                }\n\n                lxDatePicker.days.push(date);\n            }\n\n            lxDatePicker.emptyLastDays = [];\n\n            for (var k = 7 - (lastDayOfMonth.day() === 0 ? 7 : lastDayOfMonth.day()); k > 0; k--)\n            {\n                lxDatePicker.emptyLastDays.push(\n                {});\n            }\n        }\n\n        function getDateFormatted()\n        {\n            var dateFormatted = lxDatePicker.ngModelMoment.format('llll').replace(lxDatePicker.ngModelMoment.format('LT'), '').trim().replace(lxDatePicker.ngModelMoment.format('YYYY'), '').trim();\n            var dateFormattedLastChar = dateFormatted.slice(-1);\n\n            if (dateFormattedLastChar === ',')\n            {\n                dateFormatted = dateFormatted.slice(0, -1);\n            }\n\n            return dateFormatted;\n        }\n\n        function init()\n        {\n            moment.locale(lxDatePicker.locale);\n\n            lxDatePicker.ngModelMoment = angular.isDefined(lxDatePicker.ngModel) ? moment(angular.copy(lxDatePicker.ngModel)) : moment();\n            lxDatePicker.days = [];\n            lxDatePicker.daysOfWeek = [moment.weekdaysMin(1), moment.weekdaysMin(2), moment.weekdaysMin(3), moment.weekdaysMin(4), moment.weekdaysMin(5), moment.weekdaysMin(6), moment.weekdaysMin(0)];\n            lxDatePicker.years = [];\n\n            for (var y = moment().year() - 100; y <= moment().year() + 100; y++)\n            {\n                lxDatePicker.years.push(y);\n            }\n\n            generateCalendar();\n        }\n\n        function nextMonth()\n        {\n            lxDatePicker.ngModelMoment = lxDatePicker.ngModelMoment.add(1, 'month');\n\n            generateCalendar();\n        }\n\n        function openDatePicker()\n        {\n            LxDatePickerService.open(lxDatePicker.pickerId);\n        }\n\n        function previousMonth()\n        {\n            lxDatePicker.ngModelMoment = lxDatePicker.ngModelMoment.subtract(1, 'month');\n\n            generateCalendar();\n        }\n\n        function select(_day)\n        {\n            if (!_day.disabled)\n            {\n                lxDatePicker.ngModel = _day.toDate();\n                lxDatePicker.ngModelMoment = angular.copy(_day);\n\n                if (angular.isDefined(lxDatePicker.callback))\n                {\n                    lxDatePicker.callback(\n                    {\n                        newDate: lxDatePicker.ngModel\n                    });\n                }\n\n                if (angular.isDefined(modelController) && lxDatePicker.inputFormat)\n                {\n                    modelController.$setViewValue(angular.copy(_day).format(lxDatePicker.inputFormat));\n                    modelController.$render();\n                }\n\n                generateCalendar();\n            }\n        }\n\n        function selectYear(_year)\n        {\n            lxDatePicker.yearSelection = false;\n\n            lxDatePicker.ngModelMoment = lxDatePicker.ngModelMoment.year(_year);\n\n            generateCalendar();\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.date-picker')\n        .service('LxDatePickerService', LxDatePickerService);\n\n    LxDatePickerService.$inject = ['$rootScope', '$timeout', 'LxDepthService', 'LxEventSchedulerService'];\n\n    function LxDatePickerService($rootScope, $timeout, LxDepthService, LxEventSchedulerService)\n    {\n        var service = this;\n        var activeDatePickerId;\n        var datePickerFilter;\n        var idEventScheduler;\n        var scopeMap = {};\n\n        service.close = closeDatePicker;\n        service.open = openDatePicker;\n        service.registerScope = registerScope;\n\n        ////////////\n\n        function closeDatePicker(_datePickerId)\n        {\n            if (angular.isDefined(idEventScheduler))\n            {\n                LxEventSchedulerService.unregister(idEventScheduler);\n                idEventScheduler = undefined;\n            }\n\n            activeDatePickerId = undefined;\n\n            $rootScope.$broadcast('lx-date-picker__close-start', _datePickerId);\n\n            datePickerFilter.removeClass('lx-date-picker-filter--is-shown');\n            scopeMap[_datePickerId].element.removeClass('lx-date-picker--is-shown');\n\n            $timeout(function()\n            {\n                angular.element('body').removeClass('no-scroll-date-picker-' + scopeMap[_datePickerId].uuid);\n\n                datePickerFilter.remove();\n\n                scopeMap[_datePickerId].element\n                    .hide()\n                    .appendTo(scopeMap[_datePickerId].elementParent);\n\n                scopeMap[_datePickerId].isOpen = false;\n                $rootScope.$broadcast('lx-date-picker__close-end', _datePickerId);\n            }, 600);\n        }\n\n        function onKeyUp(_event)\n        {\n            if (_event.keyCode == 27 && angular.isDefined(activeDatePickerId))\n            {\n                closeDatePicker(activeDatePickerId);\n            }\n\n            _event.stopPropagation();\n        }\n\n        function openDatePicker(_datePickerId)\n        {\n            LxDepthService.register();\n\n            activeDatePickerId = _datePickerId;\n\n            angular.element('body').addClass('no-scroll-date-picker-' + scopeMap[_datePickerId].uuid);\n\n            datePickerFilter = angular.element('<div/>',\n            {\n                class: 'lx-date-picker-filter'\n            });\n\n            datePickerFilter\n                .css('z-index', LxDepthService.getDepth())\n                .appendTo('body');\n\n            if (scopeMap[activeDatePickerId].autoClose)\n            {\n                datePickerFilter.on('click', function()\n                {\n                    closeDatePicker(activeDatePickerId);\n                });\n            }\n\n            if (scopeMap[activeDatePickerId].escapeClose)\n            {\n                idEventScheduler = LxEventSchedulerService.register('keyup', onKeyUp);\n            }\n\n            scopeMap[activeDatePickerId].element\n                .css('z-index', LxDepthService.getDepth() + 1)\n                .appendTo('body')\n                .show();\n\n            $timeout(function()\n            {\n                $rootScope.$broadcast('lx-date-picker__open-start', activeDatePickerId);\n\n                scopeMap[activeDatePickerId].isOpen = true;\n\n                datePickerFilter.addClass('lx-date-picker-filter--is-shown');\n                scopeMap[activeDatePickerId].element.addClass('lx-date-picker--is-shown');\n            }, 100);\n\n            $timeout(function()\n            {\n                $rootScope.$broadcast('lx-date-picker__open-end', activeDatePickerId);\n            }, 700);\n        }\n\n        function registerScope(_datePickerId, _datePickerScope)\n        {\n            scopeMap[_datePickerId] = _datePickerScope.lxDatePicker;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.dialog')\n        .directive('lxDialog', lxDialog)\n        .directive('lxDialogHeader', lxDialogHeader)\n        .directive('lxDialogContent', lxDialogContent)\n        .directive('lxDialogFooter', lxDialogFooter)\n        .directive('lxDialogClose', lxDialogClose);\n\n    function lxDialog()\n    {\n        return {\n            restrict: 'E',\n            template: '<div class=\"dialog\" ng-class=\"{ \\'dialog--l\\': !lxDialog.size || lxDialog.size === \\'l\\', \\'dialog--s\\': lxDialog.size === \\'s\\', \\'dialog--m\\': lxDialog.size === \\'m\\' }\"><div ng-if=\"lxDialog.isOpen\" ng-transclude></div></div>',\n            scope:\n            {\n                autoClose: '=?lxAutoClose',\n                escapeClose: '=?lxEscapeClose',\n                size: '@?lxSize'\n            },\n            link: link,\n            controller: LxDialogController,\n            controllerAs: 'lxDialog',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            attrs.$observe('id', function(_newId)\n            {\n                ctrl.id = _newId;\n            });\n        }\n    }\n\n    LxDialogController.$inject = ['$element', '$interval', '$rootScope', '$scope', '$timeout', '$window', 'LxDepthService', 'LxEventSchedulerService', 'LxUtils'];\n\n    function LxDialogController($element, $interval, $rootScope, $scope, $timeout, $window, LxDepthService, LxEventSchedulerService, LxUtils)\n    {\n        var lxDialog = this;\n        var dialogFilter = angular.element('<div/>',\n        {\n            class: 'dialog-filter'\n        });\n        var dialogHeight;\n        var dialogInterval;\n        var dialogScrollable;\n        var elementParent = $element.parent();\n        var idEventScheduler;\n        var resizeDebounce;\n        var windowHeight;\n\n        lxDialog.autoClose = angular.isDefined(lxDialog.autoClose) ? lxDialog.autoClose : true;\n        lxDialog.escapeClose = angular.isDefined(lxDialog.escapeClose) ? lxDialog.escapeClose : true;\n        lxDialog.isOpen = false;\n        lxDialog.uuid = LxUtils.generateUUID();\n\n        $scope.$on('lx-dialog__open', function(event, id)\n        {\n            if (id === lxDialog.id)\n            {\n                open();\n            }\n        });\n\n        $scope.$on('lx-dialog__close', function(event, id)\n        {\n            if (id === lxDialog.id)\n            {\n                close();\n            }\n        });\n\n        $scope.$on('$destroy', function()\n        {\n            close();\n        });\n\n        ////////////\n\n        function checkDialogHeight()\n        {\n            var dialog = $element;\n            var dialogHeader = dialog.find('.dialog__header');\n            var dialogContent = dialog.find('.dialog__content');\n            var dialogFooter = dialog.find('.dialog__footer');\n\n            if (!dialogFooter.length)\n            {\n                dialogFooter = dialog.find('.dialog__actions');\n            }\n\n            if (angular.isUndefined(dialogHeader))\n            {\n                return;\n            }\n\n            var heightToCheck = 60 + dialogHeader.outerHeight() + dialogContent.outerHeight() + dialogFooter.outerHeight();\n\n            if (dialogHeight === heightToCheck && windowHeight === $window.innerHeight)\n            {\n                return;\n            }\n\n            dialogHeight = heightToCheck;\n            windowHeight = $window.innerHeight;\n\n            if (heightToCheck >= $window.innerHeight)\n            {\n                dialog.addClass('dialog--is-fixed');\n\n                dialogScrollable\n                    .css(\n                    {\n                        top: dialogHeader.outerHeight(),\n                        bottom: dialogFooter.outerHeight()\n                    })\n                    .off('scroll', checkScrollEnd)\n                    .on('scroll', checkScrollEnd);\n            }\n            else\n            {\n                dialog.removeClass('dialog--is-fixed');\n\n                dialogScrollable\n                    .removeAttr('style')\n                    .off('scroll', checkScrollEnd);\n            }\n        }\n\n        function checkDialogHeightOnResize()\n        {\n            if (resizeDebounce)\n            {\n                $timeout.cancel(resizeDebounce);\n            }\n\n            resizeDebounce = $timeout(function()\n            {\n                checkDialogHeight();\n            }, 200);\n        }\n\n        function checkScrollEnd()\n        {\n            if (dialogScrollable.scrollTop() + dialogScrollable.innerHeight() >= dialogScrollable[0].scrollHeight)\n            {\n                $rootScope.$broadcast('lx-dialog__scroll-end', lxDialog.id);\n\n                dialogScrollable.off('scroll', checkScrollEnd);\n\n                $timeout(function()\n                {\n                    dialogScrollable.on('scroll', checkScrollEnd);\n                }, 500);\n            }\n        }\n\n        function onKeyUp(_event)\n        {\n            if (_event.keyCode == 27)\n            {\n                close();\n            }\n\n            _event.stopPropagation();\n        }\n\n        function open()\n        {\n            if (lxDialog.isOpen)\n            {\n                return;\n            }\n            \n            LxDepthService.register();\n\n            angular.element('body').addClass('no-scroll-dialog-' + lxDialog.uuid);\n\n            dialogFilter\n                .css('z-index', LxDepthService.getDepth())\n                .appendTo('body');\n\n            if (lxDialog.autoClose)\n            {\n                dialogFilter.on('click', function()\n                {\n                    close();\n                });\n            }\n\n            if (lxDialog.escapeClose)\n            {\n                idEventScheduler = LxEventSchedulerService.register('keyup', onKeyUp);\n            }\n\n            $element\n                .css('z-index', LxDepthService.getDepth() + 1)\n                .appendTo('body')\n                .show();\n\n            $timeout(function()\n            {\n                $rootScope.$broadcast('lx-dialog__open-start', lxDialog.id);\n\n                lxDialog.isOpen = true;\n\n                dialogFilter.addClass('dialog-filter--is-shown');\n                $element.addClass('dialog--is-shown');\n            }, 100);\n\n            $timeout(function()\n            {\n                if ($element.find('.dialog__scrollable').length === 0)\n                {\n                    $element.find('.dialog__content').wrap(angular.element('<div/>',\n                    {\n                        class: 'dialog__scrollable'\n                    }));\n                }\n\n                dialogScrollable = $element.find('.dialog__scrollable');\n            }, 200);\n\n            $timeout(function()\n            {\n                $rootScope.$broadcast('lx-dialog__open-end', lxDialog.id);\n            }, 700);\n\n            dialogInterval = $interval(function()\n            {\n                checkDialogHeight();\n            }, 500);\n\n            angular.element($window).on('resize', checkDialogHeightOnResize);\n        }\n\n        function close()\n        {\n            if (!lxDialog.isOpen)\n            {\n                return;\n            }\n            \n            if (angular.isDefined(idEventScheduler))\n            {\n                LxEventSchedulerService.unregister(idEventScheduler);\n                idEventScheduler = undefined;\n            }\n\n            angular.element($window).off('resize', checkDialogHeightOnResize);\n            $element.find('.dialog__scrollable').off('scroll', checkScrollEnd);\n\n            $rootScope.$broadcast('lx-dialog__close-start', lxDialog.id);\n\n            if (resizeDebounce)\n            {\n                $timeout.cancel(resizeDebounce);\n            }\n\n            $interval.cancel(dialogInterval);\n\n            dialogFilter.removeClass('dialog-filter--is-shown');\n            $element.removeClass('dialog--is-shown');\n\n            $timeout(function()\n            {\n                angular.element('body').removeClass('no-scroll-dialog-' + lxDialog.uuid);\n\n                dialogFilter.remove();\n\n                $element\n                    .hide()\n                    .removeClass('dialog--is-fixed')\n                    .appendTo(elementParent);\n\n                lxDialog.isOpen = false;\n                dialogHeight = undefined;\n                $rootScope.$broadcast('lx-dialog__close-end', lxDialog.id);\n            }, 600);\n        }\n    }\n\n    function lxDialogHeader()\n    {\n        return {\n            restrict: 'E',\n            template: '<div class=\"dialog__header\" ng-transclude></div>',\n            replace: true,\n            transclude: true\n        };\n    }\n\n    function lxDialogContent()\n    {\n        return {\n            restrict: 'E',\n            template: '<div class=\"dialog__scrollable\"><div class=\"dialog__content\" ng-transclude></div></div>',\n            replace: true,\n            transclude: true\n        };\n    }\n\n    function lxDialogFooter()\n    {\n        return {\n            restrict: 'E',\n            template: '<div class=\"dialog__footer\" ng-transclude></div>',\n            replace: true,\n            transclude: true\n        };\n    }\n\n    lxDialogClose.$inject = ['LxDialogService'];\n\n    function lxDialogClose(LxDialogService)\n    {\n        return {\n            restrict: 'A',\n            link: function(scope, element)\n            {\n                element.on('click', function()\n                {\n                    LxDialogService.close(element.parents('.dialog').attr('id'));\n                });\n\n                scope.$on('$destroy', function()\n                {\n                    element.off();\n                });\n            }\n        };\n    }\n})();\n\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.dialog')\n        .service('LxDialogService', LxDialogService);\n\n    LxDialogService.$inject = ['$rootScope'];\n\n    function LxDialogService($rootScope)\n    {\n        var service = this;\n\n        service.open = open;\n        service.close = close;\n\n        ////////////\n\n        function open(_dialogId)\n        {\n            $rootScope.$broadcast('lx-dialog__open', _dialogId);\n        }\n\n        function close(_dialogId)\n        {\n            $rootScope.$broadcast('lx-dialog__close', _dialogId);\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.dropdown')\n        .directive('lxDropdown', lxDropdown)\n        .directive('lxDropdownToggle', lxDropdownToggle)\n        .directive('lxDropdownMenu', lxDropdownMenu)\n        .directive('lxDropdownFilter', lxDropdownFilter);\n\n    function lxDropdown()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'dropdown.html',\n            scope:\n            {\n                effect: '@?lxEffect',\n                escapeClose: '=?lxEscapeClose',\n                hover: '=?lxHover',\n                hoverDelay: '=?lxHoverDelay',\n                offset: '@?lxOffset',\n                overToggle: '=?lxOverToggle',\n                position: '@?lxPosition',\n                width: '@?lxWidth'\n            },\n            link: link,\n            controller: LxDropdownController,\n            controllerAs: 'lxDropdown',\n            bindToController: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            var backwardOneWay = ['position', 'width'];\n            var backwardTwoWay = ['escapeClose', 'overToggle'];\n\n            angular.forEach(backwardOneWay, function(attribute)\n            {\n                if (angular.isDefined(attrs[attribute]))\n                {\n                    attrs.$observe(attribute, function(newValue)\n                    {\n                        scope.lxDropdown[attribute] = newValue;\n                    });\n                }\n            });\n\n            angular.forEach(backwardTwoWay, function(attribute)\n            {\n                if (angular.isDefined(attrs[attribute]))\n                {\n                    scope.$watch(function()\n                    {\n                        return scope.$parent.$eval(attrs[attribute]);\n                    }, function(newValue)\n                    {\n                        scope.lxDropdown[attribute] = newValue;\n                    });\n                }\n            });\n\n            attrs.$observe('id', function(_newId)\n            {\n                ctrl.uuid = _newId;\n            });\n\n            scope.$on('$destroy', function()\n            {\n                if (ctrl.isOpen)\n                {\n                    ctrl.closeDropdownMenu();\n                }\n            });\n        }\n    }\n\n    LxDropdownController.$inject = ['$element', '$interval', '$scope', '$timeout', '$window', 'LxDepthService',\n        'LxDropdownService', 'LxEventSchedulerService', 'LxUtils'\n    ];\n\n    function LxDropdownController($element, $interval, $scope, $timeout, $window, LxDepthService,\n        LxDropdownService, LxEventSchedulerService, LxUtils)\n    {\n        var lxDropdown = this;\n        var dropdownInterval;\n        var dropdownMenu;\n        var dropdownToggle;\n        var idEventScheduler;\n        var openTimeout;\n\n        lxDropdown.closeDropdownMenu = closeDropdownMenu;\n        lxDropdown.openDropdownMenu = openDropdownMenu;\n        lxDropdown.registerDropdownMenu = registerDropdownMenu;\n        lxDropdown.registerDropdownToggle = registerDropdownToggle;\n        lxDropdown.toggle = toggle;\n        lxDropdown.uuid = LxUtils.generateUUID();\n\n        lxDropdown.effect = angular.isDefined(lxDropdown.effect) ? lxDropdown.effect : 'expand';\n        lxDropdown.escapeClose = angular.isDefined(lxDropdown.escapeClose) ? lxDropdown.escapeClose : true;\n        lxDropdown.hasToggle = false;\n        lxDropdown.isOpen = false;\n        lxDropdown.overToggle = angular.isDefined(lxDropdown.overToggle) ? lxDropdown.overToggle : false;\n        lxDropdown.position = angular.isDefined(lxDropdown.position) ? lxDropdown.position : 'left';\n\n        $scope.$on('lx-dropdown__open', function(_event, _params)\n        {\n            if (_params.uuid === lxDropdown.uuid && !lxDropdown.isOpen)\n            {\n                LxDropdownService.closeActiveDropdown();\n                LxDropdownService.registerActiveDropdownUuid(lxDropdown.uuid);\n\n                registerDropdownToggle(angular.element(_params.target));\n                openDropdownMenu();\n            }\n        });\n\n        $scope.$on('lx-dropdown__close', function(_event, _params)\n        {\n            if (_params.uuid === lxDropdown.uuid && lxDropdown.isOpen)\n            {\n                closeDropdownMenu();\n            }\n        });\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(openTimeout);\n        });\n\n        ////////////\n\n        function closeDropdownMenu()\n        {\n            $interval.cancel(dropdownInterval);\n\n            LxDropdownService.resetActiveDropdownUuid();\n\n            var velocityProperties;\n            var velocityEasing;\n\n            angular.element('body').removeClass('no-scroll-dropdown-' + lxDropdown.uuid);\n\n            dropdownMenu.css(\n            {\n                overflow: 'hidden'\n            });\n\n            if (lxDropdown.effect === 'expand')\n            {\n                velocityProperties = {\n                    width: 0,\n                    height: 0\n                };\n\n                velocityEasing = 'easeOutQuint';\n            }\n            else if (lxDropdown.effect === 'fade')\n            {\n                velocityProperties = {\n                    opacity: 0\n                };\n\n                velocityEasing = 'linear';\n            }\n\n            if (lxDropdown.effect === 'expand' || lxDropdown.effect === 'fade')\n            {\n                dropdownMenu.velocity(velocityProperties,\n                {\n                    duration: 200,\n                    easing: velocityEasing,\n                    complete: function()\n                    {\n                        dropdownMenu\n                            .removeAttr('style')\n                            .removeClass('dropdown-menu--is-open')\n                            .appendTo($element.find('.dropdown'));\n\n                        $scope.$apply(function()\n                        {\n                            lxDropdown.isOpen = false;\n\n                            if (lxDropdown.escapeClose)\n                            {\n                                LxEventSchedulerService.unregister(idEventScheduler);\n                                idEventScheduler = undefined;\n                            }\n                        });\n                    }\n                });\n            }\n            else if (lxDropdown.effect === 'none')\n            {\n                dropdownMenu\n                    .removeAttr('style')\n                    .removeClass('dropdown-menu--is-open')\n                    .appendTo($element.find('.dropdown'));\n\n                lxDropdown.isOpen = false;\n\n                if (lxDropdown.escapeClose)\n                {\n                    LxEventSchedulerService.unregister(idEventScheduler);\n                    idEventScheduler = undefined;\n                }\n            }\n        }\n\n        function getAvailableHeight()\n        {\n            var availableHeightOnTop;\n            var availableHeightOnBottom;\n            var direction;\n            var dropdownToggleHeight = dropdownToggle.outerHeight();\n            var dropdownToggleTop = dropdownToggle.offset().top - angular.element($window).scrollTop();\n            var windowHeight = $window.innerHeight;\n\n            if (lxDropdown.overToggle)\n            {\n                availableHeightOnTop = dropdownToggleTop + dropdownToggleHeight;\n                availableHeightOnBottom = windowHeight - dropdownToggleTop;\n            }\n            else\n            {\n                availableHeightOnTop = dropdownToggleTop;\n                availableHeightOnBottom = windowHeight - (dropdownToggleTop + dropdownToggleHeight);\n            }\n\n            if (availableHeightOnTop > availableHeightOnBottom)\n            {\n                direction = 'top';\n            }\n            else\n            {\n                direction = 'bottom';\n            }\n\n            return {\n                top: availableHeightOnTop,\n                bottom: availableHeightOnBottom,\n                direction: direction\n            };\n        }\n\n        function initDropdownPosition()\n        {\n            var availableHeight = getAvailableHeight();\n            var dropdownMenuWidth;\n            var dropdownMenuLeft;\n            var dropdownMenuRight;\n            var dropdownToggleWidth = dropdownToggle.outerWidth();\n            var dropdownToggleHeight = dropdownToggle.outerHeight();\n            var dropdownToggleTop = dropdownToggle.offset().top - angular.element($window).scrollTop();\n            var windowWidth = $window.innerWidth;\n            var windowHeight = $window.innerHeight;\n\n            if (angular.isDefined(lxDropdown.width))\n            {\n                if (lxDropdown.width.indexOf('%') > -1)\n                {\n                    dropdownMenuWidth = dropdownToggleWidth * (lxDropdown.width.slice(0, -1) / 100);\n                }\n                else\n                {\n                    dropdownMenuWidth = lxDropdown.width;\n                }\n            }\n            else\n            {\n                dropdownMenuWidth = 'auto';\n            }\n\n            if (lxDropdown.position === 'left')\n            {\n                dropdownMenuLeft = dropdownToggle.offset().left;\n                dropdownMenuRight = 'auto';\n            }\n            else if (lxDropdown.position === 'right')\n            {\n                dropdownMenuLeft = 'auto';\n                dropdownMenuRight = windowWidth - dropdownToggle.offset().left - dropdownToggleWidth;\n            }\n            else if (lxDropdown.position === 'center')\n            {\n                dropdownMenuLeft = (dropdownToggle.offset().left + (dropdownToggleWidth / 2)) - (dropdownMenuWidth / 2);\n                dropdownMenuRight = 'auto';\n            }\n\n            dropdownMenu.css(\n            {\n                left: dropdownMenuLeft,\n                right: dropdownMenuRight,\n                width: dropdownMenuWidth\n            });\n\n            if (availableHeight.direction === 'top')\n            {\n                dropdownMenu.css(\n                {\n                    bottom: lxDropdown.overToggle ? (windowHeight - dropdownToggleTop - dropdownToggleHeight) : (windowHeight - dropdownToggleTop + ~~lxDropdown.offset)\n                });\n\n                return availableHeight.top;\n            }\n            else if (availableHeight.direction === 'bottom')\n            {\n                dropdownMenu.css(\n                {\n                    top: lxDropdown.overToggle ? dropdownToggleTop : (dropdownToggleTop + dropdownToggleHeight + ~~lxDropdown.offset)\n                });\n\n                return availableHeight.bottom;\n            }\n        }\n\n        function openDropdownMenu()\n        {\n            lxDropdown.isOpen = true;\n\n            LxDepthService.register();\n\n            dropdownMenu\n                .addClass('dropdown-menu--is-open')\n                .css('z-index', LxDepthService.getDepth())\n                .appendTo('body');\n\n            angular.element('body').addClass('no-scroll-dropdown-' + lxDropdown.uuid);\n\n            if (lxDropdown.escapeClose)\n            {\n                idEventScheduler = LxEventSchedulerService.register('keyup', onKeyUp);\n            }\n\n            openTimeout = $timeout(function()\n            {\n                var availableHeight = initDropdownPosition() - ~~lxDropdown.offset;\n                var dropdownMenuHeight = dropdownMenu.outerHeight();\n                var dropdownMenuWidth = dropdownMenu.outerWidth();\n                var enoughHeight = true;\n\n                if (availableHeight < dropdownMenuHeight)\n                {\n                    enoughHeight = false;\n                    dropdownMenuHeight = availableHeight;\n                }\n\n                if (lxDropdown.effect === 'expand')\n                {\n                    dropdownMenu.css(\n                    {\n                        width: 0,\n                        height: 0,\n                        opacity: 1,\n                        overflow: 'hidden'\n                    });\n\n                    dropdownMenu.find('.dropdown-menu__content').css(\n                    {\n                        width: dropdownMenuWidth,\n                        height: dropdownMenuHeight\n                    });\n\n                    dropdownMenu.velocity(\n                    {\n                        width: dropdownMenuWidth\n                    },\n                    {\n                        duration: 200,\n                        easing: 'easeOutQuint',\n                        queue: false\n                    });\n\n                    dropdownMenu.velocity(\n                    {\n                        height: dropdownMenuHeight\n                    },\n                    {\n                        duration: 500,\n                        easing: 'easeOutQuint',\n                        queue: false,\n                        complete: function()\n                        {\n                            dropdownMenu.css(\n                            {\n                                overflow: 'auto'\n                            });\n\n                            if (angular.isUndefined(lxDropdown.width))\n                            {\n                                dropdownMenu.css(\n                                {\n                                    width: 'auto'\n                                });\n                            }\n\n                            $timeout(updateDropdownMenuHeight);\n\n                            dropdownMenu.find('.dropdown-menu__content').removeAttr('style');\n\n                            dropdownInterval = $interval(updateDropdownMenuHeight, 500);\n                        }\n                    });\n                }\n                else if (lxDropdown.effect === 'fade')\n                {\n                    dropdownMenu.css(\n                    {\n                        height: dropdownMenuHeight\n                    });\n\n                    dropdownMenu.velocity(\n                    {\n                        opacity: 1,\n                    },\n                    {\n                        duration: 200,\n                        easing: 'linear',\n                        queue: false,\n                        complete: function()\n                        {\n                            $timeout(updateDropdownMenuHeight);\n\n                            dropdownInterval = $interval(updateDropdownMenuHeight, 500);\n                        }\n                    });\n                }\n                else if (lxDropdown.effect === 'none')\n                {\n                    dropdownMenu.css(\n                    {\n                        opacity: 1\n                    });\n\n                    $timeout(updateDropdownMenuHeight);\n\n                    dropdownInterval = $interval(updateDropdownMenuHeight, 500);\n                }\n            });\n        }\n\n        function onKeyUp(_event)\n        {\n            if (_event.keyCode == 27)\n            {\n                closeDropdownMenu();\n            }\n\n            _event.stopPropagation();\n        }\n\n        function registerDropdownMenu(_dropdownMenu)\n        {\n            dropdownMenu = _dropdownMenu;\n        }\n\n        function registerDropdownToggle(_dropdownToggle)\n        {\n            lxDropdown.hasToggle = true;\n            dropdownToggle = _dropdownToggle;\n        }\n\n        function toggle()\n        {\n            if (!lxDropdown.isOpen)\n            {\n                openDropdownMenu();\n            }\n            else\n            {\n                closeDropdownMenu();\n            }\n        }\n\n        function updateDropdownMenuHeight()\n        {\n            var availableHeight = getAvailableHeight();\n            var dropdownMenuHeight = dropdownMenu.find('.dropdown-menu__content').outerHeight();\n\n            dropdownMenu.css(\n            {\n                height: 'auto'\n            });\n\n            if ((availableHeight[availableHeight.direction] - ~~lxDropdown.offset) < dropdownMenuHeight)\n            {\n                if (availableHeight.direction === 'top')\n                {\n                    dropdownMenu.css(\n                    {\n                        top: 0\n                    });\n                }\n                else if (availableHeight.direction === 'bottom')\n                {\n                    dropdownMenu.css(\n                    {\n                        bottom: 0\n                    });\n                }\n            }\n            else\n            {\n                if (availableHeight.direction === 'top')\n                {\n                    dropdownMenu.css(\n                    {\n                        top: 'auto'\n                    });\n                }\n                else if (availableHeight.direction === 'bottom')\n                {\n                    dropdownMenu.css(\n                    {\n                        bottom: 'auto'\n                    });\n                }\n            }\n        }\n    }\n\n    lxDropdownToggle.$inject = ['$timeout', 'LxDropdownService'];\n\n    function lxDropdownToggle($timeout, LxDropdownService)\n    {\n        return {\n            restrict: 'AE',\n            templateUrl: 'dropdown-toggle.html',\n            require: '^lxDropdown',\n            scope: true,\n            link: link,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            var hoverTimeout = [];\n            var mouseEvent = ctrl.hover ? 'mouseenter' : 'click';\n\n            ctrl.registerDropdownToggle(element);\n\n            element.on(mouseEvent, function(_event)\n            {\n                if (!ctrl.hover)\n                {\n                    _event.stopPropagation();\n                }\n\n                LxDropdownService.closeActiveDropdown();\n                LxDropdownService.registerActiveDropdownUuid(ctrl.uuid);\n\n                if (ctrl.hover)\n                {\n                    ctrl.mouseOnToggle = true;\n\n                    if (!ctrl.isOpen)\n                    {\n                        hoverTimeout[0] = $timeout(function()\n                        {\n                            scope.$apply(function()\n                            {\n                                ctrl.openDropdownMenu();\n                            });\n                        }, ctrl.hoverDelay);\n                    }\n                }\n                else\n                {\n                    scope.$apply(function()\n                    {\n                        ctrl.toggle();\n                    });\n                }\n            });\n\n            if (ctrl.hover)\n            {\n                element.on('mouseleave', function()\n                {\n                    ctrl.mouseOnToggle = false;\n\n                    $timeout.cancel(hoverTimeout[0]);\n\n                    hoverTimeout[1] = $timeout(function()\n                    {\n                        if (!ctrl.mouseOnMenu)\n                        {\n                            scope.$apply(function()\n                            {\n                                ctrl.closeDropdownMenu();\n                            });\n                        }\n                    }, ctrl.hoverDelay);\n                });\n            }\n\n            scope.$on('$destroy', function()\n            {\n                element.off();\n\n                if (ctrl.hover)\n                {\n                    $timeout.cancel(hoverTimeout[0]);\n                    $timeout.cancel(hoverTimeout[1]);\n                }\n            });\n        }\n    }\n\n    lxDropdownMenu.$inject = ['$timeout'];\n\n    function lxDropdownMenu($timeout)\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'dropdown-menu.html',\n            require: ['lxDropdownMenu', '^lxDropdown'],\n            scope: true,\n            link: link,\n            controller: LxDropdownMenuController,\n            controllerAs: 'lxDropdownMenu',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrls)\n        {\n            var hoverTimeout;\n\n            ctrls[1].registerDropdownMenu(element);\n            ctrls[0].setParentController(ctrls[1]);\n\n            if (ctrls[1].hover)\n            {\n                element.on('mouseenter', function()\n                {\n                    ctrls[1].mouseOnMenu = true;\n                });\n\n                element.on('mouseleave', function()\n                {\n                    ctrls[1].mouseOnMenu = false;\n\n                    hoverTimeout = $timeout(function()\n                    {\n                        if (!ctrls[1].mouseOnToggle)\n                        {\n                            scope.$apply(function()\n                            {\n                                ctrls[1].closeDropdownMenu();\n                            });\n                        }\n                    }, ctrls[1].hoverDelay);\n                });\n            }\n\n            scope.$on('$destroy', function()\n            {\n                if (ctrls[1].hover)\n                {\n                    element.off();\n                    $timeout.cancel(hoverTimeout);\n                }\n            });\n        }\n    }\n\n    function LxDropdownMenuController()\n    {\n        var lxDropdownMenu = this;\n\n        lxDropdownMenu.setParentController = setParentController;\n\n        ////////////\n\n        function setParentController(_parentCtrl)\n        {\n            lxDropdownMenu.parentCtrl = _parentCtrl;\n        }\n    }\n\n    lxDropdownFilter.$inject = ['$timeout'];\n\n    function lxDropdownFilter($timeout)\n    {\n        return {\n            restrict: 'A',\n            link: link\n        };\n\n        function link(scope, element)\n        {\n            var focusTimeout;\n\n            element.on('click', function(_event)\n            {\n                _event.stopPropagation();\n            });\n\n            focusTimeout = $timeout(function()\n            {\n                element.find('input').focus();\n            }, 200);\n\n            scope.$on('$destroy', function()\n            {\n                $timeout.cancel(focusTimeout);\n                element.off();\n            });\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.dropdown')\n        .service('LxDropdownService', LxDropdownService);\n\n    LxDropdownService.$inject = ['$document', '$rootScope', '$timeout'];\n\n    function LxDropdownService($document, $rootScope, $timeout)\n    {\n        var service = this;\n        var activeDropdownUuid;\n\n        service.close = close;\n        service.closeActiveDropdown = closeActiveDropdown;\n        service.open = open;\n        service.registerActiveDropdownUuid = registerActiveDropdownUuid;\n        service.resetActiveDropdownUuid = resetActiveDropdownUuid;\n\n        $document.on('click', closeActiveDropdown);\n\n        ////////////\n\n        function close(_uuid)\n        {\n            $rootScope.$broadcast('lx-dropdown__close',\n            {\n                uuid: _uuid\n            });\n        }\n\n        function closeActiveDropdown()\n        {\n            $rootScope.$broadcast('lx-dropdown__close',\n            {\n                uuid: activeDropdownUuid\n            });\n        }\n\n        function open(_uuid, _target)\n        {\n            $rootScope.$broadcast('lx-dropdown__open',\n            {\n                uuid: _uuid,\n                target: _target\n            });\n        }\n\n        function registerActiveDropdownUuid(_uuid)\n        {\n            activeDropdownUuid = _uuid;\n        }\n\n        function resetActiveDropdownUuid()\n        {\n            activeDropdownUuid = undefined;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.fab')\n        .directive('lxFab', lxFab)\n        .directive('lxFabTrigger', lxFabTrigger)\n        .directive('lxFabActions', lxFabActions);\n\n    function lxFab()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'fab.html',\n            scope: true,\n            link: link,\n            controller: LxFabController,\n            controllerAs: 'lxFab',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            attrs.$observe('lxDirection', function(newDirection)\n            {\n                ctrl.setFabDirection(newDirection);\n            });\n        }\n    }\n\n    function LxFabController()\n    {\n        var lxFab = this;\n\n        lxFab.setFabDirection = setFabDirection;\n\n        ////////////\n\n        function setFabDirection(_direction)\n        {\n            lxFab.lxDirection = _direction;\n        }\n    }\n\n    function lxFabTrigger()\n    {\n        return {\n            restrict: 'E',\n            require: '^lxFab',\n            templateUrl: 'fab-trigger.html',\n            transclude: true,\n            replace: true\n        };\n    }\n\n    function lxFabActions()\n    {\n        return {\n            restrict: 'E',\n            require: '^lxFab',\n            templateUrl: 'fab-actions.html',\n            link: link,\n            transclude: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            scope.parentCtrl = ctrl;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.file-input')\n        .directive('lxFileInput', lxFileInput);\n\n    function lxFileInput()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'file-input.html',\n            scope:\n            {\n                label: '@lxLabel',\n                callback: '&?lxCallback'\n            },\n            link: link,\n            controller: LxFileInputController,\n            controllerAs: 'lxFileInput',\n            bindToController: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            var input = element.find('input');\n\n            input\n                .on('change', ctrl.updateModel)\n                .on('blur', function()\n                {\n                    element.removeClass('input-file--is-focus');\n                });\n\n            scope.$on('$destroy', function()\n            {\n                input.off();\n            });\n        }\n    }\n\n    LxFileInputController.$inject = ['$element', '$scope', '$timeout'];\n\n    function LxFileInputController($element, $scope, $timeout)\n    {\n        var lxFileInput = this;\n        var input = $element.find('input');\n        var timer;\n\n        lxFileInput.updateModel = updateModel;\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer);\n        });\n\n        ////////////\n\n        function setFileName()\n        {\n            if (input.val())\n            {\n                lxFileInput.fileName = input.val().replace(/C:\\\\fakepath\\\\/i, '');\n\n                $element.addClass('input-file--is-focus');\n                $element.addClass('input-file--is-active');\n            }\n            else\n            {\n                lxFileInput.fileName = undefined;\n\n                $element.removeClass('input-file--is-active');\n            }\n\n            input.val(undefined);\n        }\n\n        function updateModel()\n        {\n            if (angular.isDefined(lxFileInput.callback))\n            {\n                lxFileInput.callback(\n                {\n                    newFile: input[0].files[0]\n                });\n            }\n\n            timer = $timeout(setFileName);\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.icon')\n        .directive('lxIcon', lxIcon);\n\n    function lxIcon()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'icon.html',\n            scope:\n            {\n                color: '@?lxColor',\n                id: '@lxId',\n                size: '@?lxSize',\n                type: '@?lxType'\n            },\n            controller: LxIconController,\n            controllerAs: 'lxIcon',\n            bindToController: true,\n            replace: true\n        };\n    }\n\n    function LxIconController()\n    {\n        var lxIcon = this;\n\n        lxIcon.getClass = getClass;\n\n        ////////////\n\n        function getClass()\n        {\n            var iconClass = [];\n\n            iconClass.push('mdi-' + lxIcon.id);\n\n            if (angular.isDefined(lxIcon.size))\n            {\n                iconClass.push('icon--' + lxIcon.size);\n            }\n\n            if (angular.isDefined(lxIcon.color))\n            {\n                iconClass.push('icon--' + lxIcon.color);\n            }\n\n            if (angular.isDefined(lxIcon.type))\n            {\n                iconClass.push('icon--' + lxIcon.type);\n            }\n\n            return iconClass;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.notification')\n        .service('LxNotificationService', LxNotificationService);\n\n    LxNotificationService.$inject = ['$injector', '$interval', '$rootScope', '$timeout', 'LxDepthService', 'LxEventSchedulerService'];\n\n    function LxNotificationService($injector, $interval, $rootScope, $timeout, LxDepthService, LxEventSchedulerService)\n    {\n        var service = this;\n        var dialogFilter;\n        var dialog;\n        var idEventScheduler;\n        var notificationList = [];\n\n        service.alert = showAlertDialog;\n        service.confirm = showConfirmDialog;\n        service.error = notifyError;\n        service.info = notifyInfo;\n        service.notify = notify;\n        service.success = notifySuccess;\n        service.warning = notifyWarning;\n\n        ////////////\n\n        //\n        // NOTIFICATION\n        //\n\n        function deleteNotification(_notification)\n        {\n            var notifIndex = notificationList.indexOf(_notification);\n\n            var dnOffset = angular.isDefined(notificationList[notifIndex]) ? 24 + notificationList[notifIndex].height : 24;\n\n            for (var idx = 0; idx < notifIndex; idx++)\n            {\n                if (notificationList.length > 1)\n                {\n                    notificationList[idx].margin -= dnOffset;\n                    notificationList[idx].elem.css('marginBottom', notificationList[idx].margin + 'px');\n                }\n            }\n\n            _notification.elem.removeClass('notification--is-shown');\n\n            $timeout(function()\n            {\n                _notification.elem.remove();\n\n                // Find index again because notificationList may have changed\n                notifIndex = notificationList.indexOf(_notification);\n\n                if (notifIndex != -1)\n                {\n                    notificationList.splice(notifIndex, 1);\n                }\n            }, 400);\n        }\n\n        function getElementHeight(_elem)\n        {\n            return parseFloat(window.getComputedStyle(_elem, null).height);\n        }\n\n        function moveNotificationUp()\n        {\n            var newNotifIndex = notificationList.length - 1;\n            notificationList[newNotifIndex].height = getElementHeight(notificationList[newNotifIndex].elem[0]);\n\n            var upOffset = 0;\n\n            for (var idx = newNotifIndex; idx >= 0; idx--)\n            {\n                if (notificationList.length > 1 && idx !== newNotifIndex)\n                {\n                    upOffset = 24 + notificationList[newNotifIndex].height;\n\n                    notificationList[idx].margin += upOffset;\n                    notificationList[idx].elem.css('marginBottom', notificationList[idx].margin + 'px');\n                }\n            }\n        }\n\n        function notify(_text, _icon, _sticky, _color)\n        {\n            LxDepthService.register();\n\n            var notification = angular.element('<div/>',\n            {\n                class: 'notification'\n            });\n            var notificationText = angular.element('<span/>',\n            {\n                class: 'notification__content',\n                html: _text\n            });\n            var notificationTimeout;\n\n            if (angular.isDefined(_icon))\n            {\n                var notificationIcon = angular.element('<i/>',\n                {\n                    class: 'notification__icon mdi mdi-' + _icon\n                });\n\n                notification\n                    .addClass('notification--has-icon')\n                    .append(notificationIcon);\n            }\n\n            if (angular.isDefined(_color))\n            {\n                notification.addClass('notification--' + _color);\n            }\n\n            notification\n                .append(notificationText)\n                .css('z-index', LxDepthService.getDepth())\n                .appendTo('body');\n\n            $timeout(function()\n            {\n                notification.addClass('notification--is-shown');\n            }, 100);\n\n            var data = {\n                elem: notification,\n                margin: 0\n            };\n            notificationList.push(data);\n            moveNotificationUp();\n\n            notification.bind('click', function()\n            {\n                deleteNotification(data);\n\n                if (angular.isDefined(notificationTimeout))\n                {\n                    $timeout.cancel(notificationTimeout);\n                }\n            });\n\n            if (angular.isUndefined(_sticky) || !_sticky)\n            {\n                notificationTimeout = $interval(function()\n                {\n                    deleteNotification(data);\n                }, 6000, 1);\n            }\n        }\n\n        function notifyError(_text, _sticky)\n        {\n            notify(_text, 'alert-circle', _sticky, 'red');\n        }\n\n        function notifyInfo(_text, _sticky)\n        {\n            notify(_text, 'information-outline', _sticky, 'blue');\n        }\n\n        function notifySuccess(_text, _sticky)\n        {\n            notify(_text, 'check', _sticky, 'green');\n        }\n\n        function notifyWarning(_text, _sticky)\n        {\n            notify(_text, 'alert', _sticky, 'orange');\n        }\n\n        //\n        // ALERT & CONFIRM\n        //\n\n        function buildDialogActions(_buttons, _callback, _unbind)\n        {\n            var $compile = $injector.get('$compile');\n\n            var dialogActions = angular.element('<div/>',\n            {\n                class: 'dialog__actions'\n            });\n\n            var dialogLastBtn = angular.element('<button/>',\n            {\n                class: 'btn btn--m btn--blue btn--flat',\n                text: _buttons.ok\n            });\n\n            if (angular.isDefined(_buttons.cancel))\n            {\n                var dialogFirstBtn = angular.element('<button/>',\n                {\n                    class: 'btn btn--m btn--red btn--flat',\n                    text: _buttons.cancel\n                });\n\n                dialogFirstBtn.attr('lx-ripple', '');\n                $compile(dialogFirstBtn)($rootScope);\n\n                dialogActions.append(dialogFirstBtn);\n\n                dialogFirstBtn.bind('click', function()\n                {\n                    _callback(false);\n                    closeDialog();\n                });\n            }\n\n            dialogLastBtn.attr('lx-ripple', '');\n            $compile(dialogLastBtn)($rootScope);\n\n            dialogActions.append(dialogLastBtn);\n\n            dialogLastBtn.bind('click', function()\n            {\n                _callback(true);\n                closeDialog();\n            });\n\n            if (!_unbind)\n            {\n                idEventScheduler = LxEventSchedulerService.register('keyup', function(event)\n                {\n                    if (event.keyCode == 13)\n                    {\n                        _callback(true);\n                        closeDialog();\n                    }\n                    else if (event.keyCode == 27)\n                    {\n                        _callback(angular.isUndefined(_buttons.cancel));\n                        closeDialog();\n                    }\n\n                    event.stopPropagation();\n                });\n            }\n\n            return dialogActions;\n        }\n\n        function buildDialogContent(_text)\n        {\n            var dialogContent = angular.element('<div/>',\n            {\n                class: 'dialog__content p++ pt0 tc-black-2',\n                text: _text\n            });\n\n            return dialogContent;\n        }\n\n        function buildDialogHeader(_title)\n        {\n            var dialogHeader = angular.element('<div/>',\n            {\n                class: 'dialog__header p++ fs-title',\n                text: _title\n            });\n\n            return dialogHeader;\n        }\n\n        function closeDialog()\n        {\n            if (angular.isDefined(idEventScheduler))\n            {\n                $timeout(function()\n                {\n                    LxEventSchedulerService.unregister(idEventScheduler);\n                    idEventScheduler = undefined;\n                }, 1);\n            }\n\n            dialogFilter.removeClass('dialog-filter--is-shown');\n            dialog.removeClass('dialog--is-shown');\n\n            $timeout(function()\n            {\n                dialogFilter.remove();\n                dialog.remove();\n            }, 600);\n        }\n\n        function showAlertDialog(_title, _text, _button, _callback, _unbind)\n        {\n            LxDepthService.register();\n\n            dialogFilter = angular.element('<div/>',\n            {\n                class: 'dialog-filter'\n            });\n\n            dialog = angular.element('<div/>',\n            {\n                class: 'dialog dialog--alert'\n            });\n\n            var dialogHeader = buildDialogHeader(_title);\n            var dialogContent = buildDialogContent(_text);\n            var dialogActions = buildDialogActions(\n            {\n                ok: _button\n            }, _callback, _unbind);\n\n            dialogFilter\n                .css('z-index', LxDepthService.getDepth())\n                .appendTo('body');\n\n            dialog\n                .append(dialogHeader)\n                .append(dialogContent)\n                .append(dialogActions)\n                .css('z-index', LxDepthService.getDepth() + 1)\n                .appendTo('body')\n                .show()\n                .focus();\n\n            $timeout(function()\n            {\n                angular.element(document.activeElement).blur();\n\n                dialogFilter.addClass('dialog-filter--is-shown');\n                dialog.addClass('dialog--is-shown');\n            }, 100);\n        }\n\n        function showConfirmDialog(_title, _text, _buttons, _callback, _unbind)\n        {\n            LxDepthService.register();\n\n            dialogFilter = angular.element('<div/>',\n            {\n                class: 'dialog-filter'\n            });\n\n            dialog = angular.element('<div/>',\n            {\n                class: 'dialog dialog--alert'\n            });\n\n            var dialogHeader = buildDialogHeader(_title);\n            var dialogContent = buildDialogContent(_text);\n            var dialogActions = buildDialogActions(_buttons, _callback, _unbind);\n\n            dialogFilter\n                .css('z-index', LxDepthService.getDepth())\n                .appendTo('body');\n\n            dialog\n                .append(dialogHeader)\n                .append(dialogContent)\n                .append(dialogActions)\n                .css('z-index', LxDepthService.getDepth() + 1)\n                .appendTo('body')\n                .show()\n                .focus();\n\n            $timeout(function()\n            {\n                angular.element(document.activeElement).blur();\n\n                dialogFilter.addClass('dialog-filter--is-shown');\n                dialog.addClass('dialog--is-shown');\n            }, 100);\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.progress')\n        .directive('lxProgress', lxProgress);\n\n    function lxProgress()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'progress.html',\n            scope:\n            {\n                lxColor: '@?',\n                lxDiameter: '@?',\n                lxType: '@',\n                lxValue: '@'\n            },\n            controller: LxProgressController,\n            controllerAs: 'lxProgress',\n            bindToController: true,\n            replace: true\n        };\n    }\n\n    function LxProgressController()\n    {\n        var lxProgress = this;\n\n        lxProgress.getCircularProgressValue = getCircularProgressValue;\n        lxProgress.getLinearProgressValue = getLinearProgressValue;\n        lxProgress.getProgressDiameter = getProgressDiameter;\n\n        init();\n\n        ////////////\n\n        function getCircularProgressValue()\n        {\n            if (angular.isDefined(lxProgress.lxValue))\n            {\n                return {\n                    'stroke-dasharray': lxProgress.lxValue * 1.26 + ',200'\n                };\n            }\n        }\n\n        function getLinearProgressValue()\n        {\n            if (angular.isDefined(lxProgress.lxValue))\n            {\n                return {\n                    'transform': 'scale(' + lxProgress.lxValue / 100 + ', 1)'\n                };\n            }\n        }\n\n        function getProgressDiameter()\n        {\n            if (lxProgress.lxType === 'circular')\n            {\n                return {\n                    'transform': 'scale(' + parseInt(lxProgress.lxDiameter) / 100 + ')'\n                };\n            }\n\n            return;\n        }\n\n        function init()\n        {\n            lxProgress.lxDiameter = angular.isDefined(lxProgress.lxDiameter) ? lxProgress.lxDiameter : 100;\n            lxProgress.lxColor = angular.isDefined(lxProgress.lxColor) ? lxProgress.lxColor : 'primary';\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.radio-button')\n        .directive('lxRadioGroup', lxRadioGroup)\n        .directive('lxRadioButton', lxRadioButton)\n        .directive('lxRadioButtonLabel', lxRadioButtonLabel)\n        .directive('lxRadioButtonHelp', lxRadioButtonHelp);\n\n    function lxRadioGroup()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'radio-group.html',\n            transclude: true,\n            replace: true\n        };\n    }\n\n    function lxRadioButton()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'radio-button.html',\n            scope:\n            {\n                lxColor: '@?',\n                name: '@',\n                ngChange: '&?',\n                ngDisabled: '=?',\n                ngModel: '=',\n                ngValue: '=?',\n                value: '@?'\n            },\n            controller: LxRadioButtonController,\n            controllerAs: 'lxRadioButton',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n    }\n\n    LxRadioButtonController.$inject = ['$scope', '$timeout', 'LxUtils'];\n\n    function LxRadioButtonController($scope, $timeout, LxUtils)\n    {\n        var lxRadioButton = this;\n        var radioButtonId;\n        var radioButtonHasChildren;\n        var timer;\n\n        lxRadioButton.getRadioButtonId = getRadioButtonId;\n        lxRadioButton.getRadioButtonHasChildren = getRadioButtonHasChildren;\n        lxRadioButton.setRadioButtonId = setRadioButtonId;\n        lxRadioButton.setRadioButtonHasChildren = setRadioButtonHasChildren;\n        lxRadioButton.triggerNgChange = triggerNgChange;\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer);\n        });\n\n        init();\n\n        ////////////\n\n        function getRadioButtonId()\n        {\n            return radioButtonId;\n        }\n\n        function getRadioButtonHasChildren()\n        {\n            return radioButtonHasChildren;\n        }\n\n        function init()\n        {\n            setRadioButtonId(LxUtils.generateUUID());\n            setRadioButtonHasChildren(false);\n\n            if (angular.isDefined(lxRadioButton.value) && angular.isUndefined(lxRadioButton.ngValue))\n            {\n                lxRadioButton.ngValue = lxRadioButton.value;\n            }\n\n            lxRadioButton.lxColor = angular.isUndefined(lxRadioButton.lxColor) ? 'accent' : lxRadioButton.lxColor;\n        }\n\n        function setRadioButtonId(_radioButtonId)\n        {\n            radioButtonId = _radioButtonId;\n        }\n\n        function setRadioButtonHasChildren(_radioButtonHasChildren)\n        {\n            radioButtonHasChildren = _radioButtonHasChildren;\n        }\n\n        function triggerNgChange()\n        {\n            timer = $timeout(lxRadioButton.ngChange);\n        }\n    }\n\n    function lxRadioButtonLabel()\n    {\n        return {\n            restrict: 'AE',\n            require: ['^lxRadioButton', '^lxRadioButtonLabel'],\n            templateUrl: 'radio-button-label.html',\n            link: link,\n            controller: LxRadioButtonLabelController,\n            controllerAs: 'lxRadioButtonLabel',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrls)\n        {\n            ctrls[0].setRadioButtonHasChildren(true);\n            ctrls[1].setRadioButtonId(ctrls[0].getRadioButtonId());\n        }\n    }\n\n    function LxRadioButtonLabelController()\n    {\n        var lxRadioButtonLabel = this;\n        var radioButtonId;\n\n        lxRadioButtonLabel.getRadioButtonId = getRadioButtonId;\n        lxRadioButtonLabel.setRadioButtonId = setRadioButtonId;\n\n        ////////////\n\n        function getRadioButtonId()\n        {\n            return radioButtonId;\n        }\n\n        function setRadioButtonId(_radioButtonId)\n        {\n            radioButtonId = _radioButtonId;\n        }\n    }\n\n    function lxRadioButtonHelp()\n    {\n        return {\n            restrict: 'AE',\n            require: '^lxRadioButton',\n            templateUrl: 'radio-button-help.html',\n            transclude: true,\n            replace: true\n        };\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.ripple')\n        .directive('lxRipple', lxRipple);\n\n    lxRipple.$inject = ['$timeout'];\n\n    function lxRipple($timeout)\n    {\n        return {\n            restrict: 'A',\n            link: link,\n        };\n\n        function link(scope, element, attrs)\n        {\n            var timer;\n\n            element\n                .css(\n                {\n                    position: 'relative',\n                    overflow: 'hidden'\n                })\n                .on('mousedown', function(e)\n                {\n                    var ripple;\n\n                    if (element.find('.ripple').length === 0)\n                    {\n                        ripple = angular.element('<span/>',\n                        {\n                            class: 'ripple'\n                        });\n\n                        if (attrs.lxRipple)\n                        {\n                            ripple.addClass('bgc-' + attrs.lxRipple);\n                        }\n\n                        element.prepend(ripple);\n                    }\n                    else\n                    {\n                        ripple = element.find('.ripple');\n                    }\n\n                    ripple.removeClass('ripple--is-animated');\n\n                    if (!ripple.height() && !ripple.width())\n                    {\n                        var diameter = Math.max(element.outerWidth(), element.outerHeight());\n\n                        ripple.css(\n                        {\n                            height: diameter,\n                            width: diameter\n                        });\n                    }\n\n                    var x = e.pageX - element.offset().left - ripple.width() / 2;\n                    var y = e.pageY - element.offset().top - ripple.height() / 2;\n\n                    ripple.css(\n                    {\n                        top: y + 'px',\n                        left: x + 'px'\n                    }).addClass('ripple--is-animated');\n\n                    timer = $timeout(function()\n                    {\n                        ripple.removeClass('ripple--is-animated');\n                    }, 651);\n                });\n\n            scope.$on('$destroy', function()\n            {\n                $timeout.cancel(timer);\n                element.off();\n            });\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.select')\n        .filter('filterChoices', filterChoices)\n        .directive('lxSelect', lxSelect)\n        .directive('lxSelectSelected', lxSelectSelected)\n        .directive('lxSelectChoices', lxSelectChoices);\n\n    filterChoices.$inject = ['$filter'];\n\n    function filterChoices($filter)\n    {\n        return function(choices, externalFilter, textFilter)\n        {\n            if (externalFilter)\n            {\n                return choices;\n            }\n\n            var toFilter = [];\n\n            if (!angular.isArray(choices))\n            {\n                if (angular.isObject(choices))\n                {\n                    for (var idx in choices)\n                    {\n                        if (angular.isArray(choices[idx]))\n                        {\n                            toFilter = toFilter.concat(choices[idx]);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                toFilter = choices;\n            }\n\n            return $filter('filter')(toFilter, textFilter);\n        };\n    }\n\n    function lxSelect()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'select.html',\n            scope:\n            {\n                allowClear: '=?lxAllowClear',\n                allowNewValue: '=?lxAllowNewValue',\n                autocomplete: '=?lxAutocomplete',\n                choices: '=?lxChoices',\n                choicesCustomStyle: '=?lxChoicesCustomStyle',\n                customStyle: '=?lxCustomStyle',\n                displayFilter: '=?lxDisplayFilter',\n                error: '=?lxError',\n                filter: '&?lxFilter',\n                fixedLabel: '=?lxFixedLabel',\n                helper: '=?lxHelper',\n                helperMessage: '@?lxHelperMessage',\n                label: '@?lxLabel',\n                loading: '=?lxLoading',\n                modelToSelection: '&?lxModelToSelection',\n                multiple: '=?lxMultiple',\n                ngChange: '&?',\n                ngDisabled: '=?',\n                ngModel: '=',\n                selectionToModel: '&?lxSelectionToModel',\n                theme: '@?lxTheme',\n                valid: '=?lxValid',\n                viewMode: '@?lxViewMode'\n            },\n            link: link,\n            controller: LxSelectController,\n            controllerAs: 'lxSelect',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs)\n        {\n            var backwardOneWay = ['customStyle'];\n            var backwardTwoWay = ['allowClear', 'choices', 'error', 'loading', 'multiple', 'valid'];\n\n            angular.forEach(backwardOneWay, function(attribute)\n            {\n                if (angular.isDefined(attrs[attribute]))\n                {\n                    attrs.$observe(attribute, function(newValue)\n                    {\n                        scope.lxSelect[attribute] = newValue;\n                    });\n                }\n            });\n\n            angular.forEach(backwardTwoWay, function(attribute)\n            {\n                if (angular.isDefined(attrs[attribute]))\n                {\n                    scope.$watch(function()\n                    {\n                        return scope.$parent.$eval(attrs[attribute]);\n                    }, function(newValue)\n                    {\n                        if (attribute === 'multiple' && angular.isUndefined(newValue))\n                        {\n                            scope.lxSelect[attribute] = true;\n                        }\n                        else\n                        {\n                            scope.lxSelect[attribute] = newValue;\n                        }\n                    });\n                }\n            });\n\n            attrs.$observe('placeholder', function(newValue)\n            {\n                scope.lxSelect.label = newValue;\n            });\n\n            attrs.$observe('change', function(newValue)\n            {\n                scope.lxSelect.ngChange = function(data)\n                {\n                    return scope.$parent.$eval(newValue, data);\n                };\n            });\n\n            attrs.$observe('filter', function(newValue)\n            {\n                scope.lxSelect.filter = function(data)\n                {\n                    return scope.$parent.$eval(newValue, data);\n                };\n                scope.lxSelect.displayFilter = true;\n            });\n\n            attrs.$observe('modelToSelection', function(newValue)\n            {\n                scope.lxSelect.modelToSelection = function(data)\n                {\n                    return scope.$parent.$eval(newValue, data);\n                };\n            });\n\n            attrs.$observe('selectionToModel', function(newValue)\n            {\n                scope.lxSelect.selectionToModel = function(data)\n                {\n                    return scope.$parent.$eval(newValue, data);\n                };\n            });\n        }\n    }\n\n    LxSelectController.$inject = ['$interpolate', '$element', '$filter', '$sce', 'LxDropdownService', 'LxUtils'];\n\n    function LxSelectController($interpolate, $element, $filter, $sce, LxDropdownService, LxUtils)\n    {\n        var lxSelect = this;\n        var choiceTemplate;\n        var selectedTemplate;\n\n        lxSelect.displayChoice = displayChoice;\n        lxSelect.displaySelected = displaySelected;\n        lxSelect.displaySubheader = displaySubheader;\n        lxSelect.getFilteredChoices = getFilteredChoices;\n        lxSelect.getSelectedModel = getSelectedModel;\n        lxSelect.isSelected = isSelected;\n        lxSelect.keyEvent = keyEvent;\n        lxSelect.registerChoiceTemplate = registerChoiceTemplate;\n        lxSelect.registerSelectedTemplate = registerSelectedTemplate;\n        lxSelect.select = select;\n        lxSelect.toggleChoice = toggleChoice;\n        lxSelect.unselect = unselect;\n        lxSelect.updateFilter = updateFilter;\n\n        lxSelect.activeChoiceIndex = -1;\n        lxSelect.activeSelectedIndex = -1;\n        lxSelect.uuid = LxUtils.generateUUID();\n        lxSelect.filterModel = undefined;\n        lxSelect.ngModel = angular.isUndefined(lxSelect.ngModel) && lxSelect.multiple ? [] : lxSelect.ngModel;\n        lxSelect.unconvertedModel = lxSelect.multiple ? [] : undefined;\n        lxSelect.viewMode = angular.isUndefined(lxSelect.viewMode) ? 'field' : 'chips';\n\n        ////////////\n        \n        function arrayObjectIndexOf(arr, obj)\n        {\n            for (var i = 0; i < arr.length; i++)\n            {\n                if (angular.equals(arr[i], obj))\n                {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        function displayChoice(_choice)\n        {\n            var choiceScope = {\n                $choice: _choice\n            };\n\n            return $sce.trustAsHtml($interpolate(choiceTemplate)(choiceScope));\n        }\n\n        function displaySelected(_selected)\n        {\n            var selectedScope = {};\n\n            if (!angular.isArray(lxSelect.choices))\n            {\n                var found = false;\n\n                for (var header in lxSelect.choices)\n                {\n                    if (found)\n                    {\n                        break;\n                    }\n\n                    if (lxSelect.choices.hasOwnProperty(header))\n                    {\n                        for (var idx = 0, len = lxSelect.choices[header].length; idx < len; idx++)\n                        {\n                            if (angular.equals(_selected, lxSelect.choices[header][idx]))\n                            {\n                                selectedScope.$selectedSubheader = header;\n\n                                found = true;\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (angular.isDefined(_selected))\n            {\n                selectedScope.$selected = _selected;\n            }\n            else\n            {\n                selectedScope.$selected = getSelectedModel();\n            }\n\n            return $sce.trustAsHtml($interpolate(selectedTemplate)(selectedScope));\n        }\n\n        function displaySubheader(_subheader)\n        {\n            return $sce.trustAsHtml(_subheader);\n        }\n\n        function getFilteredChoices()\n        {\n            return $filter('filterChoices')(lxSelect.choices, lxSelect.filter, lxSelect.filterModel);\n        }\n\n        function getSelectedModel()\n        {\n            if (angular.isDefined(lxSelect.modelToSelection) || angular.isDefined(lxSelect.selectionToModel))\n            {\n                return lxSelect.unconvertedModel;\n            }\n            else\n            {\n                return lxSelect.ngModel;\n            }\n        }\n\n        function isSelected(_choice)\n        {\n            if (lxSelect.multiple && angular.isDefined(getSelectedModel()))\n            {\n                return arrayObjectIndexOf(getSelectedModel(), _choice) !== -1;\n            }\n            else if (angular.isDefined(getSelectedModel()))\n            {\n                return angular.equals(getSelectedModel(), _choice);\n            }\n        }\n\n        function keyEvent(_event)\n        {\n            if (_event.keyCode !== 8)\n            {\n                lxSelect.activeSelectedIndex = -1;\n            }\n\n            switch (_event.keyCode) {\n                case 8:\n                    keyRemove();\n                    break;\n\n                case 13:\n                    keySelect();\n                    _event.preventDefault();\n                    break;\n\n                case 38:\n                    keyUp();\n                    _event.preventDefault();\n                    break;\n\n                case 40:\n                    keyDown();\n                    _event.preventDefault();\n                    break;\n            }\n        }\n\n        function keyDown()\n        {\n            var filteredChoices = $filter('filterChoices')(lxSelect.choices, lxSelect.filter, lxSelect.filterModel);\n\n            if (filteredChoices.length)\n            {\n                lxSelect.activeChoiceIndex += 1;\n\n                if (lxSelect.activeChoiceIndex >= filteredChoices.length)\n                {\n                    lxSelect.activeChoiceIndex = 0;\n                }\n            }\n        }\n\n        function keyRemove()\n        {\n            if (lxSelect.filterModel || !lxSelect.getSelectedModel().length)\n            {\n                return;\n            }\n\n            if (lxSelect.activeSelectedIndex === -1)\n            {\n                lxSelect.activeSelectedIndex = lxSelect.getSelectedModel().length - 1;\n            }\n            else\n            {\n                unselect(lxSelect.getSelectedModel()[lxSelect.activeSelectedIndex]);\n            }\n        }\n\n        function keySelect()\n        {\n            var filteredChoices = $filter('filterChoices')(lxSelect.choices, lxSelect.filter, lxSelect.filterModel);\n\n            if (filteredChoices.length && filteredChoices[lxSelect.activeChoiceIndex])\n            {\n                toggleChoice(filteredChoices[lxSelect.activeChoiceIndex]);\n            }\n            else if (lxSelect.filterModel && lxSelect.allowNewValue)\n            {\n                getSelectedModel().push(lxSelect.filterModel);\n                lxSelect.filterModel = undefined;\n                LxDropdownService.close('dropdown-' + lxSelect.uuid);\n            }\n        }\n\n        function keyUp()\n        {\n            var filteredChoices = $filter('filterChoices')(lxSelect.choices, lxSelect.filter, lxSelect.filterModel);\n\n            if (filteredChoices.length)\n            {\n                lxSelect.activeChoiceIndex -= 1;\n\n                if (lxSelect.activeChoiceIndex < 0)\n                {\n                    lxSelect.activeChoiceIndex = filteredChoices.length - 1;\n                }\n            }\n        }\n\n        function registerChoiceTemplate(_choiceTemplate)\n        {\n            choiceTemplate = _choiceTemplate;\n        }\n\n        function registerSelectedTemplate(_selectedTemplate)\n        {\n            selectedTemplate = _selectedTemplate;\n        }\n\n        function select(_choice)\n        {\n            if (lxSelect.multiple && angular.isUndefined(lxSelect.ngModel))\n            {\n                lxSelect.ngModel = [];\n            }\n\n            if (angular.isDefined(lxSelect.selectionToModel))\n            {\n                lxSelect.selectionToModel(\n                {\n                    data: _choice,\n                    callback: function(resp)\n                    {\n                        if (lxSelect.multiple)\n                        {\n                            lxSelect.ngModel.push(resp);\n                        }\n                        else\n                        {\n                            lxSelect.ngModel = resp;\n                        }\n\n                        if (lxSelect.autocomplete)\n                        {\n                            $element.find('.lx-select-selected__filter').focus();\n                        }\n                    }\n                });\n            }\n            else\n            {\n                if (lxSelect.multiple)\n                {\n                    lxSelect.ngModel.push(_choice);\n                }\n                else\n                {\n                    lxSelect.ngModel = _choice;\n                }\n\n                if (lxSelect.autocomplete)\n                {\n                    $element.find('.lx-select-selected__filter').focus();\n                }\n            }\n        }\n\n        function toggleChoice(_choice, _event)\n        {\n            if (lxSelect.multiple && !lxSelect.autocomplete)\n            {\n                _event.stopPropagation();\n            }\n\n            if (lxSelect.multiple && isSelected(_choice))\n            {\n                unselect(_choice);\n            }\n            else\n            {\n                select(_choice);\n            }\n\n            if (lxSelect.autocomplete)\n            {\n                lxSelect.activeChoiceIndex = -1;\n                lxSelect.filterModel = undefined;\n\n                LxDropdownService.close('dropdown-' + lxSelect.uuid);\n            }\n        }\n\n        function unselect(_choice)\n        {\n            if (angular.isDefined(lxSelect.selectionToModel))\n            {\n                lxSelect.selectionToModel(\n                {\n                    data: _choice,\n                    callback: function(resp)\n                    {\n                        lxSelect.ngModel.splice(lxSelect.ngModel.indexOf(resp), 1);\n\n                        if (lxSelect.autocomplete)\n                        {\n                            $element.find('.lx-select-selected__filter').focus();\n                            lxSelect.activeSelectedIndex = -1;\n                        }\n                    }\n                });\n\n                lxSelect.unconvertedModel.splice(lxSelect.unconvertedModel.indexOf(_choice), 1);\n            }\n            else\n            {\n                lxSelect.ngModel.splice(lxSelect.ngModel.indexOf(_choice), 1);\n\n                if (lxSelect.autocomplete)\n                {\n                    $element.find('.lx-select-selected__filter').focus();\n                    lxSelect.activeSelectedIndex = -1;\n                }\n            }\n        }\n\n        function updateFilter()\n        {\n            if (angular.isDefined(lxSelect.filter))\n            {\n                lxSelect.filter(\n                {\n                    newValue: lxSelect.filterModel\n                });\n            }\n\n            if (lxSelect.autocomplete)\n            {\n                lxSelect.activeChoiceIndex = -1;\n\n                if (lxSelect.filterModel)\n                {\n                    LxDropdownService.open('dropdown-' + lxSelect.uuid, '#lx-select-selected-wrapper-' + lxSelect.uuid);\n                }\n                else\n                {\n                    LxDropdownService.close('dropdown-' + lxSelect.uuid);\n                }\n            }\n        }\n    }\n\n    function lxSelectSelected()\n    {\n        return {\n            restrict: 'E',\n            require: ['lxSelectSelected', '^lxSelect'],\n            templateUrl: 'select-selected.html',\n            link: link,\n            controller: LxSelectSelectedController,\n            controllerAs: 'lxSelectSelected',\n            bindToController: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrls, transclude)\n        {\n            ctrls[0].setParentController(ctrls[1]);\n\n            transclude(scope, function(clone)\n            {\n                var template = '';\n\n                for (var i = 0; i < clone.length; i++)\n                {\n                    template += clone[i].data || clone[i].outerHTML || '';\n                }\n\n                ctrls[1].registerSelectedTemplate(template);\n            });\n        }\n    }\n\n    function LxSelectSelectedController()\n    {\n        var lxSelectSelected = this;\n\n        lxSelectSelected.clearModel = clearModel;\n        lxSelectSelected.setParentController = setParentController;\n        lxSelectSelected.removeSelected = removeSelected;\n\n        ////////////\n\n        function clearModel(_event)\n        {\n            _event.stopPropagation();\n\n            lxSelectSelected.parentCtrl.ngModel = undefined;\n            lxSelectSelected.parentCtrl.unconvertedModel = undefined;\n        }\n\n        function setParentController(_parentCtrl)\n        {\n            lxSelectSelected.parentCtrl = _parentCtrl;\n        }\n\n        function removeSelected(_selected, _event)\n        {\n            _event.stopPropagation();\n\n            lxSelectSelected.parentCtrl.unselect(_selected);\n        }\n    }\n\n    function lxSelectChoices()\n    {\n        return {\n            restrict: 'E',\n            require: ['lxSelectChoices', '^lxSelect'],\n            templateUrl: 'select-choices.html',\n            link: link,\n            controller: LxSelectChoicesController,\n            controllerAs: 'lxSelectChoices',\n            bindToController: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrls, transclude)\n        {\n            ctrls[0].setParentController(ctrls[1]);\n\n            transclude(scope, function(clone)\n            {\n                var template = '';\n\n                for (var i = 0; i < clone.length; i++)\n                {\n                    template += clone[i].data || clone[i].outerHTML || '';\n                }\n\n                ctrls[1].registerChoiceTemplate(template);\n            });\n        }\n    }\n\n    LxSelectChoicesController.$inject = ['$scope', '$timeout'];\n\n    function LxSelectChoicesController($scope, $timeout)\n    {\n        var lxSelectChoices = this;\n        var timer;\n\n        lxSelectChoices.isArray = isArray;\n        lxSelectChoices.setParentController = setParentController;\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer);\n        });\n\n        ////////////\n\n        function isArray()\n        {\n            return angular.isArray(lxSelectChoices.parentCtrl.choices);\n        }\n\n        function setParentController(_parentCtrl)\n        {\n            lxSelectChoices.parentCtrl = _parentCtrl;\n\n            $scope.$watch(function()\n            {\n                return lxSelectChoices.parentCtrl.ngModel;\n            }, function(newModel, oldModel)\n            {\n                timer = $timeout(function()\n                {\n                    if (newModel !== oldModel && angular.isDefined(lxSelectChoices.parentCtrl.ngChange))\n                    {\n                        lxSelectChoices.parentCtrl.ngChange(\n                        {\n                            newValue: newModel,\n                            oldValue: oldModel\n                        });\n                    }\n\n                    if (angular.isDefined(lxSelectChoices.parentCtrl.modelToSelection) || angular.isDefined(lxSelectChoices.parentCtrl.selectionToModel))\n                    {\n                        toSelection();\n                    }\n                });\n            }, true);\n        }\n\n        function toSelection()\n        {\n            if (lxSelectChoices.parentCtrl.multiple)\n            {\n                lxSelectChoices.parentCtrl.unconvertedModel = [];\n\n                angular.forEach(lxSelectChoices.parentCtrl.ngModel, function(item)\n                {\n                    lxSelectChoices.parentCtrl.modelToSelection(\n                    {\n                        data: item,\n                        callback: function(resp)\n                        {\n                            lxSelectChoices.parentCtrl.unconvertedModel.push(resp);\n                        }\n                    });\n                });\n            }\n            else\n            {\n                lxSelectChoices.parentCtrl.modelToSelection(\n                {\n                    data: lxSelectChoices.parentCtrl.ngModel,\n                    callback: function(resp)\n                    {\n                        lxSelectChoices.parentCtrl.unconvertedModel = resp;\n                    }\n                });\n            }\n        }\n    }\n})();\n\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.search-filter')\n        .directive('lxSearchFilter', lxSearchFilter);\n\n    function lxSearchFilter()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'search-filter.html',\n            scope:\n            {\n                closed: '=?lxClosed',\n                color: '@?lxColor',\n                width: '@?lxWidth'\n            },\n            link: link,\n            controller: LxSearchFilterController,\n            controllerAs: 'lxSearchFilter',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrl, transclude)\n        {\n            var input;\n\n            attrs.$observe('lxWidth', function(newWidth)\n            {\n                if (angular.isDefined(scope.lxSearchFilter.closed) && scope.lxSearchFilter.closed)\n                {\n                    element.find('.search-filter__container').css('width', newWidth);\n                }\n            });\n\n            transclude(function()\n            {\n                input = element.find('input');\n\n                ctrl.setInput(input);\n                ctrl.setModel(input.data('$ngModelController'));\n\n                input.on('blur', ctrl.blurInput);\n            });\n\n            scope.$on('$destroy', function()\n            {\n                input.off();\n            });\n        }\n    }\n\n    LxSearchFilterController.$inject = ['$element'];\n\n    function LxSearchFilterController($element)\n    {\n        var lxSearchFilter = this;\n        var input;\n        var modelController;\n\n        lxSearchFilter.blurInput = blurInput;\n        lxSearchFilter.clearInput = clearInput;\n        lxSearchFilter.getClass = getClass;\n        lxSearchFilter.openInput = openInput;\n        lxSearchFilter.setInput = setInput;\n        lxSearchFilter.setModel = setModel;\n\n        lxSearchFilter.color = angular.isDefined(lxSearchFilter.color) ? lxSearchFilter.color : 'black';\n\n        ////////////\n\n        function blurInput()\n        {\n            if (angular.isDefined(lxSearchFilter.closed) && lxSearchFilter.closed && !input.val())\n            {\n                $element.velocity(\n                {\n                    width: 40\n                },\n                {\n                    duration: 400,\n                    easing: 'easeOutQuint',\n                    queue: false\n                });\n            }\n        }\n\n        function clearInput()\n        {\n            modelController.$setViewValue(undefined);\n            modelController.$render();\n\n            input.focus();\n        }\n\n        function getClass()\n        {\n            var searchFilterClass = [];\n\n            if (angular.isUndefined(lxSearchFilter.closed) || !lxSearchFilter.closed)\n            {\n                searchFilterClass.push('search-filter--opened-mode');\n            }\n\n            if (angular.isDefined(lxSearchFilter.closed) && lxSearchFilter.closed)\n            {\n                searchFilterClass.push('search-filter--closed-mode');\n            }\n\n            if (input.val())\n            {\n                searchFilterClass.push('search-filter--has-clear-button');\n            }\n\n            if (angular.isDefined(lxSearchFilter.color))\n            {\n                searchFilterClass.push('search-filter--' + lxSearchFilter.color);\n            }\n\n            return searchFilterClass;\n        }\n\n        function openInput()\n        {\n            if (angular.isDefined(lxSearchFilter.closed) && lxSearchFilter.closed)\n            {\n                $element.velocity(\n                {\n                    width: angular.isDefined(lxSearchFilter.width) ? lxSearchFilter.width : 240\n                },\n                {\n                    duration: 400,\n                    easing: 'easeOutQuint',\n                    queue: false,\n                    complete: function()\n                    {\n                        input.focus();\n                    }\n                });\n            }\n            else\n            {\n                input.focus();\n            }\n        }\n\n        function setInput(_input)\n        {\n            input = _input;\n        }\n\n        function setModel(_modelControler)\n        {\n            modelController = _modelControler;\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.switch')\n        .directive('lxSwitch', lxSwitch)\n        .directive('lxSwitchLabel', lxSwitchLabel)\n        .directive('lxSwitchHelp', lxSwitchHelp);\n\n    function lxSwitch()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'switch.html',\n            scope:\n            {\n                ngModel: '=',\n                name: '@?',\n                ngTrueValue: '@?',\n                ngFalseValue: '@?',\n                ngChange: '&?',\n                ngDisabled: '=?',\n                lxColor: '@?'\n            },\n            controller: LxSwitchController,\n            controllerAs: 'lxSwitch',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n    }\n\n    LxSwitchController.$inject = ['$scope', '$timeout', 'LxUtils'];\n\n    function LxSwitchController($scope, $timeout, LxUtils)\n    {\n        var lxSwitch = this;\n        var switchId;\n        var switchHasChildren;\n        var timer;\n\n        lxSwitch.getSwitchId = getSwitchId;\n        lxSwitch.getSwitchHasChildren = getSwitchHasChildren;\n        lxSwitch.setSwitchId = setSwitchId;\n        lxSwitch.setSwitchHasChildren = setSwitchHasChildren;\n        lxSwitch.triggerNgChange = triggerNgChange;\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer);\n        });\n\n        init();\n\n        ////////////\n\n        function getSwitchId()\n        {\n            return switchId;\n        }\n\n        function getSwitchHasChildren()\n        {\n            return switchHasChildren;\n        }\n\n        function init()\n        {\n            setSwitchId(LxUtils.generateUUID());\n            setSwitchHasChildren(false);\n\n            lxSwitch.ngTrueValue = angular.isUndefined(lxSwitch.ngTrueValue) ? true : lxSwitch.ngTrueValue;\n            lxSwitch.ngFalseValue = angular.isUndefined(lxSwitch.ngFalseValue) ? false : lxSwitch.ngFalseValue;\n            lxSwitch.lxColor = angular.isUndefined(lxSwitch.lxColor) ? 'accent' : lxSwitch.lxColor;\n        }\n\n        function setSwitchId(_switchId)\n        {\n            switchId = _switchId;\n        }\n\n        function setSwitchHasChildren(_switchHasChildren)\n        {\n            switchHasChildren = _switchHasChildren;\n        }\n\n        function triggerNgChange()\n        {\n            timer = $timeout(lxSwitch.ngChange);\n        }\n    }\n\n    function lxSwitchLabel()\n    {\n        return {\n            restrict: 'AE',\n            require: ['^lxSwitch', '^lxSwitchLabel'],\n            templateUrl: 'switch-label.html',\n            link: link,\n            controller: LxSwitchLabelController,\n            controllerAs: 'lxSwitchLabel',\n            bindToController: true,\n            transclude: true,\n            replace: true\n        };\n\n        function link(scope, element, attrs, ctrls)\n        {\n            ctrls[0].setSwitchHasChildren(true);\n            ctrls[1].setSwitchId(ctrls[0].getSwitchId());\n        }\n    }\n\n    function LxSwitchLabelController()\n    {\n        var lxSwitchLabel = this;\n        var switchId;\n\n        lxSwitchLabel.getSwitchId = getSwitchId;\n        lxSwitchLabel.setSwitchId = setSwitchId;\n\n        ////////////\n\n        function getSwitchId()\n        {\n            return switchId;\n        }\n\n        function setSwitchId(_switchId)\n        {\n            switchId = _switchId;\n        }\n    }\n\n    function lxSwitchHelp()\n    {\n        return {\n            restrict: 'AE',\n            require: '^lxSwitch',\n            templateUrl: 'switch-help.html',\n            transclude: true,\n            replace: true\n        };\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.tabs')\n        .directive('lxTabs', lxTabs)\n        .directive('lxTab', lxTab)\n        .directive('lxTabsPanes', lxTabsPanes)\n        .directive('lxTabPane', lxTabPane);\n\n    function lxTabs()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'tabs.html',\n            scope:\n            {\n                layout: '@?lxLayout',\n                theme: '@?lxTheme',\n                color: '@?lxColor',\n                indicator: '@?lxIndicator',\n                activeTab: '=?lxActiveTab',\n                panesId: '@?lxPanesId',\n                links: '=?lxLinks'\n            },\n            controller: LxTabsController,\n            controllerAs: 'lxTabs',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n    }\n\n    LxTabsController.$inject = ['LxUtils', '$element', '$scope', '$timeout'];\n\n    function LxTabsController(LxUtils, $element, $scope, $timeout)\n    {\n        var lxTabs = this;\n        var tabsLength;\n        var timer1;\n        var timer2;\n        var timer3;\n        var timer4;\n\n        lxTabs.removeTab = removeTab;\n        lxTabs.setActiveTab = setActiveTab;\n        lxTabs.setViewMode = setViewMode;\n        lxTabs.tabIsActive = tabIsActive;\n        lxTabs.updateTabs = updateTabs;\n\n        lxTabs.activeTab = angular.isDefined(lxTabs.activeTab) ? lxTabs.activeTab : 0;\n        lxTabs.color = angular.isDefined(lxTabs.color) ? lxTabs.color : 'primary';\n        lxTabs.indicator = angular.isDefined(lxTabs.indicator) ? lxTabs.indicator : 'accent';\n        lxTabs.layout = angular.isDefined(lxTabs.layout) ? lxTabs.layout : 'full';\n        lxTabs.tabs = [];\n        lxTabs.theme = angular.isDefined(lxTabs.theme) ? lxTabs.theme : 'light';\n        lxTabs.viewMode = angular.isDefined(lxTabs.links) ? 'separate' : 'gather';\n\n        $scope.$watch(function()\n        {\n            return lxTabs.activeTab;\n        }, function(_newActiveTab, _oldActiveTab)\n        {\n            timer1 = $timeout(function()\n            {\n                setIndicatorPosition(_oldActiveTab);\n\n                if (lxTabs.viewMode === 'separate')\n                {\n                    angular.element('#' + lxTabs.panesId).find('.tabs__pane').hide();\n                    angular.element('#' + lxTabs.panesId).find('.tabs__pane').eq(lxTabs.activeTab).show();\n                }\n            });\n        });\n\n        $scope.$watch(function()\n        {\n            return lxTabs.links;\n        }, function(_newLinks)\n        {\n            lxTabs.viewMode = angular.isDefined(_newLinks) ? 'separate' : 'gather';\n            \n            angular.forEach(_newLinks, function(link, index)\n            {\n                var tab = {\n                    uuid: LxUtils.generateUUID(),\n                    index: index,\n                    label: link.label,\n                    icon: link.icon,\n                    disabled: link.disabled\n                };\n\n                updateTabs(tab);\n            });\n        });\n\n        timer2 = $timeout(function()\n        {\n            tabsLength = lxTabs.tabs.length;\n        });\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer1);\n            $timeout.cancel(timer2);\n            $timeout.cancel(timer3);\n            $timeout.cancel(timer4);\n        });\n\n        ////////////\n\n        function removeTab(_tab)\n        {\n            lxTabs.tabs.splice(_tab.index, 1);\n\n            angular.forEach(lxTabs.tabs, function(tab, index)\n            {\n                tab.index = index;\n            });\n\n            if (lxTabs.activeTab === 0)\n            {\n                timer3 = $timeout(function()\n                {\n                    setIndicatorPosition();\n                });\n            }\n            else\n            {\n                setActiveTab(lxTabs.tabs[0]);\n            }\n        }\n\n        function setActiveTab(_tab)\n        {\n            if (!_tab.disabled)\n            {\n                lxTabs.activeTab = _tab.index;\n            }\n        }\n\n        function setIndicatorPosition(_previousActiveTab)\n        {\n            var direction = lxTabs.activeTab > _previousActiveTab ? 'right' : 'left';\n            var indicator = $element.find('.tabs__indicator');\n            var activeTab = $element.find('.tabs__link').eq(lxTabs.activeTab);\n            var indicatorLeft = activeTab.position().left;\n            var indicatorRight = $element.outerWidth() - (indicatorLeft + activeTab.outerWidth());\n\n            if (angular.isUndefined(_previousActiveTab))\n            {\n                indicator.css(\n                {\n                    left: indicatorLeft,\n                    right: indicatorRight\n                });\n            }\n            else\n            {\n                var animationProperties = {\n                    duration: 200,\n                    easing: 'easeOutQuint'\n                };\n\n                if (direction === 'left')\n                {\n                    indicator.velocity(\n                    {\n                        left: indicatorLeft\n                    }, animationProperties);\n\n                    indicator.velocity(\n                    {\n                        right: indicatorRight\n                    }, animationProperties);\n                }\n                else\n                {\n                    indicator.velocity(\n                    {\n                        right: indicatorRight\n                    }, animationProperties);\n\n                    indicator.velocity(\n                    {\n                        left: indicatorLeft\n                    }, animationProperties);\n                }\n            }\n        }\n\n        function setViewMode(_viewMode)\n        {\n            lxTabs.viewMode = _viewMode;\n        }\n\n        function tabIsActive(_index)\n        {\n            return lxTabs.activeTab === _index;\n        }\n\n        function updateTabs(_tab)\n        {\n            var newTab = true;\n\n            angular.forEach(lxTabs.tabs, function(tab)\n            {\n                if (tab.uuid === _tab.uuid)\n                {\n                    newTab = false;\n\n                    tab.index = _tab.index;\n                    tab.icon = _tab.icon;\n                    tab.label = _tab.label;\n                }\n            });\n\n            if (newTab)\n            {\n                lxTabs.tabs.push(_tab);\n\n                if (angular.isDefined(tabsLength))\n                {\n                    timer4 = $timeout(function()\n                    {\n                        setIndicatorPosition();\n                    });\n                }\n            }\n        }\n    }\n\n    function lxTab()\n    {\n        return {\n            restrict: 'E',\n            require: ['lxTab', '^lxTabs'],\n            templateUrl: 'tab.html',\n            scope:\n            {\n                ngDisabled: '=?'\n            },\n            link: link,\n            controller: LxTabController,\n            controllerAs: 'lxTab',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrls)\n        {\n            ctrls[0].init(ctrls[1], element.index());\n\n            attrs.$observe('lxLabel', function(_newLabel)\n            {\n                ctrls[0].setLabel(_newLabel);\n            });\n\n            attrs.$observe('lxIcon', function(_newIcon)\n            {\n                ctrls[0].setIcon(_newIcon);\n            });\n        }\n    }\n\n    LxTabController.$inject = ['$scope', 'LxUtils'];\n\n    function LxTabController($scope, LxUtils)\n    {\n        var lxTab = this;\n        var parentCtrl;\n        var tab = {\n            uuid: LxUtils.generateUUID(),\n            index: undefined,\n            label: undefined,\n            icon: undefined,\n            disabled: false\n        };\n\n        lxTab.init = init;\n        lxTab.setIcon = setIcon;\n        lxTab.setLabel = setLabel;\n        lxTab.tabIsActive = tabIsActive;\n\n        $scope.$watch(function()\n        {\n            return lxTab.ngDisabled;\n        }, function(_isDisabled)\n        {\n            if (_isDisabled)\n            {\n                tab.disabled = true;\n            }\n            else\n            {\n                tab.disabled = false;\n            }\n\n            parentCtrl.updateTabs(tab);\n        });\n\n        $scope.$on('$destroy', function()\n        {\n            parentCtrl.removeTab(tab);\n        });\n\n        ////////////\n\n        function init(_parentCtrl, _index)\n        {\n            parentCtrl = _parentCtrl;\n            tab.index = _index;\n\n            parentCtrl.updateTabs(tab);\n        }\n\n        function setIcon(_icon)\n        {\n            tab.icon = _icon;\n\n            parentCtrl.updateTabs(tab);\n        }\n\n        function setLabel(_label)\n        {\n            tab.label = _label;\n\n            parentCtrl.updateTabs(tab);\n        }\n\n        function tabIsActive()\n        {\n            return parentCtrl.tabIsActive(tab.index);\n        }\n    }\n\n    function lxTabsPanes()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'tabs-panes.html',\n            scope: true,\n            replace: true,\n            transclude: true\n        };\n    }\n\n    function lxTabPane()\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'tab-pane.html',\n            scope: true,\n            replace: true,\n            transclude: true\n        };\n    }\n})();\n\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.text-field')\n        .directive('lxTextField', lxTextField);\n\n    lxTextField.$inject = ['$timeout'];\n\n    function lxTextField($timeout)\n    {\n        return {\n            restrict: 'E',\n            templateUrl: 'text-field.html',\n            scope:\n            {\n                allowClear: '=?lxAllowClear',\n                error: '=?lxError',\n                fixedLabel: '=?lxFixedLabel',\n                icon: '@?lxIcon',\n                label: '@lxLabel',\n                ngDisabled: '=?',\n                theme: '@?lxTheme',\n                valid: '=?lxValid'\n            },\n            link: link,\n            controller: LxTextFieldController,\n            controllerAs: 'lxTextField',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        function link(scope, element, attrs, ctrl, transclude)\n        {\n            var backwardOneWay = ['icon', 'label', 'theme'];\n            var backwardTwoWay = ['error', 'fixedLabel', 'valid'];\n            var input;\n            var timer;\n\n            angular.forEach(backwardOneWay, function(attribute)\n            {\n                if (angular.isDefined(attrs[attribute]))\n                {\n                    attrs.$observe(attribute, function(newValue)\n                    {\n                        scope.lxTextField[attribute] = newValue;\n                    });\n                }\n            });\n\n            angular.forEach(backwardTwoWay, function(attribute)\n            {\n                if (angular.isDefined(attrs[attribute]))\n                {\n                    scope.$watch(function()\n                    {\n                        return scope.$parent.$eval(attrs[attribute]);\n                    }, function(newValue)\n                    {\n                        scope.lxTextField[attribute] = newValue;\n                    });\n                }\n            });\n\n            transclude(function()\n            {\n                input = element.find('textarea');\n\n                if (input[0])\n                {\n                    input.on('cut paste drop keydown', function()\n                    {\n                        timer = $timeout(ctrl.updateTextareaHeight);\n                    });\n                }\n                else\n                {\n                    input = element.find('input');\n                }\n\n                input.addClass('text-field__input');\n\n                ctrl.setInput(input);\n                ctrl.setModel(input.data('$ngModelController'));\n\n                input.on('focus', ctrl.focusInput);\n                input.on('blur', ctrl.blurInput);\n            });\n\n            scope.$on('$destroy', function()\n            {\n                $timeout.cancel(timer);\n                input.off();\n            });\n        }\n    }\n\n    LxTextFieldController.$inject = ['$scope', '$timeout'];\n\n    function LxTextFieldController($scope, $timeout)\n    {\n        var lxTextField = this;\n        var input;\n        var modelController;\n        var timer1;\n        var timer2;\n\n        lxTextField.blurInput = blurInput;\n        lxTextField.clearInput = clearInput;\n        lxTextField.focusInput = focusInput;\n        lxTextField.hasValue = hasValue;\n        lxTextField.setInput = setInput;\n        lxTextField.setModel = setModel;\n        lxTextField.updateTextareaHeight = updateTextareaHeight;\n\n        $scope.$watch(function()\n        {\n            return modelController.$viewValue;\n        }, function(newValue, oldValue)\n        {\n            if (angular.isDefined(newValue) && newValue)\n            {\n                lxTextField.isActive = true;\n            }\n            else\n            {\n                lxTextField.isActive = false;\n            }\n        });\n\n        $scope.$on('$destroy', function()\n        {\n            $timeout.cancel(timer1);\n            $timeout.cancel(timer2);\n        });\n\n        ////////////\n\n        function blurInput()\n        {\n            if (!hasValue())\n            {\n                $scope.$apply(function()\n                {\n                    lxTextField.isActive = false;\n                });\n            }\n\n            $scope.$apply(function()\n            {\n                lxTextField.isFocus = false;\n            });\n        }\n\n        function clearInput(_event)\n        {\n            _event.stopPropagation();\n\n            modelController.$setViewValue(undefined);\n            modelController.$render();\n        }\n\n        function focusInput()\n        {\n            $scope.$apply(function()\n            {\n                lxTextField.isActive = true;\n                lxTextField.isFocus = true;\n            });\n        }\n\n        function hasValue()\n        {\n            return input.val();\n        }\n\n        function init()\n        {\n            lxTextField.isActive = hasValue();\n            lxTextField.isFocus = false;\n        }\n\n        function setInput(_input)\n        {\n            input = _input;\n\n            timer1 = $timeout(init);\n\n            if (input.selector === 'textarea')\n            {\n                timer2 = $timeout(updateTextareaHeight);\n            }\n        }\n\n        function setModel(_modelControler)\n        {\n            modelController = _modelControler;\n        }\n\n        function updateTextareaHeight()\n        {\n            var tmpTextArea = angular.element('<textarea class=\"text-field__input\" style=\"width: ' + input.width() + 'px;\">' + input.val() + '</textarea>');\n\n            tmpTextArea.appendTo('body');\n\n            input.css(\n            {\n                height: tmpTextArea[0].scrollHeight + 'px'\n            });\n\n            tmpTextArea.remove();\n        }\n    }\n})();\n(function()\n{\n    'use strict';\n\n    angular\n        .module('lumx.tooltip')\n        .directive('lxTooltip', lxTooltip);\n\n    function lxTooltip()\n    {\n        return {\n            restrict: 'A',\n            scope:\n            {\n                tooltip: '@lxTooltip',\n                position: '@?lxTooltipPosition'\n            },\n            link: link,\n            controller: LxTooltipController,\n            controllerAs: 'lxTooltip',\n            bindToController: true\n        };\n\n        function link(scope, element, attrs, ctrl)\n        {\n            if (angular.isDefined(attrs.lxTooltip))\n            {\n                attrs.$observe('lxTooltip', function(newValue)\n                {\n                    ctrl.updateTooltipText(newValue);\n                });\n            }\n\n            if (angular.isDefined(attrs.lxTooltipPosition))\n            {\n                attrs.$observe('lxTooltipPosition', function(newValue)\n                {\n                    scope.lxTooltip.position = newValue;\n                });\n            }\n\n            element.on('mouseenter', ctrl.showTooltip);\n            element.on('mouseleave', ctrl.hideTooltip);\n\n            scope.$on('$destroy', function()\n            {\n                element.off();\n            });\n        }\n    }\n\n    LxTooltipController.$inject = ['$element', '$scope', '$timeout', 'LxDepthService'];\n\n    function LxTooltipController($element, $scope, $timeout, LxDepthService)\n    {\n        var lxTooltip = this;\n        var timer1;\n        var timer2;\n        var tooltip;\n        var tooltipBackground;\n        var tooltipLabel;\n\n        lxTooltip.hideTooltip = hideTooltip;\n        lxTooltip.showTooltip = showTooltip;\n        lxTooltip.updateTooltipText = updateTooltipText;\n\n        lxTooltip.position = angular.isDefined(lxTooltip.position) ? lxTooltip.position : 'top';\n\n        $scope.$on('$destroy', function()\n        {\n            if (angular.isDefined(tooltip))\n            {\n                tooltip.remove();\n                tooltip = undefined;\n            }\n\n            $timeout.cancel(timer1);\n            $timeout.cancel(timer2);\n        });\n\n        ////////////\n\n        function hideTooltip()\n        {\n            if (angular.isDefined(tooltip))\n            {\n                tooltip.removeClass('tooltip--is-active');\n\n                timer1 = $timeout(function()\n                {\n                    if (angular.isDefined(tooltip))\n                    {\n                        tooltip.remove();\n                        tooltip = undefined;\n                    }\n                }, 200);\n            }\n        }\n\n        function setTooltipPosition()\n        {\n            var width = $element.outerWidth(),\n                height = $element.outerHeight(),\n                top = $element.offset().top,\n                left = $element.offset().left;\n\n            tooltip\n                .append(tooltipBackground)\n                .append(tooltipLabel)\n                .appendTo('body');\n\n            if (lxTooltip.position === 'top')\n            {\n                tooltip.css(\n                {\n                    left: left - (tooltip.outerWidth() / 2) + (width / 2),\n                    top: top - tooltip.outerHeight()\n                });\n            }\n            else if (lxTooltip.position === 'bottom')\n            {\n                tooltip.css(\n                {\n                    left: left - (tooltip.outerWidth() / 2) + (width / 2),\n                    top: top + height\n                });\n            }\n            else if (lxTooltip.position === 'left')\n            {\n                tooltip.css(\n                {\n                    left: left - tooltip.outerWidth(),\n                    top: top + (height / 2) - (tooltip.outerHeight() / 2)\n                });\n            }\n            else if (lxTooltip.position === 'right')\n            {\n                tooltip.css(\n                {\n                    left: left + width,\n                    top: top + (height / 2) - (tooltip.outerHeight() / 2)\n                });\n            }\n        }\n\n        function showTooltip()\n        {\n            if (angular.isUndefined(tooltip))\n            {\n                LxDepthService.register();\n\n                tooltip = angular.element('<div/>',\n                {\n                    class: 'tooltip tooltip--' + lxTooltip.position\n                });\n\n                tooltipBackground = angular.element('<div/>',\n                {\n                    class: 'tooltip__background'\n                });\n\n                tooltipLabel = angular.element('<span/>',\n                {\n                    class: 'tooltip__label',\n                    text: lxTooltip.tooltip\n                });\n\n                setTooltipPosition();\n\n                tooltip\n                    .append(tooltipBackground)\n                    .append(tooltipLabel)\n                    .css('z-index', LxDepthService.getDepth())\n                    .appendTo('body');\n\n                timer2 = $timeout(function()\n                {\n                    tooltip.addClass('tooltip--is-active');\n                });\n            }\n        }\n\n        function updateTooltipText(_newValue)\n        {\n            if (angular.isDefined(tooltipLabel))\n            {\n                tooltipLabel.text(_newValue);\n            }\n        }\n    }\n})();\n\nangular.module(\"lumx.dropdown\").run(['$templateCache', function(a) { a.put('dropdown.html', '<div class=\"dropdown\"\\n' +\n    '     ng-class=\"{ \\'dropdown--has-toggle\\': lxDropdown.hasToggle,\\n' +\n    '                 \\'dropdown--is-open\\': lxDropdown.isOpen }\"\\n' +\n    '     ng-transclude></div>\\n' +\n    '');\n\ta.put('dropdown-toggle.html', '<div class=\"dropdown-toggle\" ng-transclude></div>\\n' +\n    '');\n\ta.put('dropdown-menu.html', '<div class=\"dropdown-menu\">\\n' +\n    '    <div class=\"dropdown-menu__content\" ng-transclude ng-if=\"lxDropdownMenu.parentCtrl.isOpen\"></div>\\n' +\n    '</div>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.file-input\").run(['$templateCache', function(a) { a.put('file-input.html', '<div class=\"input-file\">\\n' +\n    '    <span class=\"input-file__label\">{{ lxFileInput.label }}</span>\\n' +\n    '    <span class=\"input-file__filename\">{{ lxFileInput.fileName }}</span>\\n' +\n    '    <input type=\"file\" class=\"input-file__input\">\\n' +\n    '</div>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.text-field\").run(['$templateCache', function(a) { a.put('text-field.html', '<div class=\"text-field\"\\n' +\n    '     ng-class=\"{ \\'text-field--error\\': lxTextField.error,\\n' +\n    '                 \\'text-field--fixed-label\\': lxTextField.fixedLabel,\\n' +\n    '                 \\'text-field--has-icon\\': lxTextField.icon,\\n' +\n    '                 \\'text-field--has-value\\': lxTextField.hasValue(),\\n' +\n    '                 \\'text-field--is-active\\': lxTextField.isActive,\\n' +\n    '                 \\'text-field--is-disabled\\': lxTextField.ngDisabled,\\n' +\n    '                 \\'text-field--is-focus\\': lxTextField.isFocus,\\n' +\n    '                 \\'text-field--theme-light\\': !lxTextField.theme || lxTextField.theme === \\'light\\',\\n' +\n    '                 \\'text-field--theme-dark\\': lxTextField.theme === \\'dark\\',\\n' +\n    '                 \\'text-field--valid\\': lxTextField.valid }\">\\n' +\n    '    <div class=\"text-field__icon\" ng-if=\"lxTextField.icon\">\\n' +\n    '        <i class=\"mdi mdi-{{ lxTextField.icon }}\"></i>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '    <label class=\"text-field__label\">\\n' +\n    '        {{ lxTextField.label }}\\n' +\n    '    </label>\\n' +\n    '\\n' +\n    '    <div ng-transclude></div>\\n' +\n    '\\n' +\n    '    <span class=\"text-field__clear\" ng-click=\"lxTextField.clearInput($event)\" ng-if=\"lxTextField.allowClear\">\\n' +\n    '        <i class=\"mdi mdi-close-circle\"></i>\\n' +\n    '    </span>\\n' +\n    '</div>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.search-filter\").run(['$templateCache', function(a) { a.put('search-filter.html', '<div class=\"search-filter\" ng-class=\"lxSearchFilter.getClass()\">\\n' +\n    '    <div class=\"search-filter__container\">\\n' +\n    '        <div class=\"search-filter__button\">\\n' +\n    '            <lx-button lx-size=\"l\" lx-color=\"{{ lxSearchFilter.color }}\" lx-type=\"icon\" ng-click=\"lxSearchFilter.openInput()\">\\n' +\n    '                <i class=\"mdi mdi-magnify\"></i>\\n' +\n    '            </lx-button>\\n' +\n    '        </div>\\n' +\n    '\\n' +\n    '        <div class=\"search-filter__input\" ng-transclude></div>\\n' +\n    '\\n' +\n    '        <span class=\"search-filter__clear\" ng-click=\"lxSearchFilter.clearInput()\">\\n' +\n    '            <i class=\"mdi mdi-close-circle\"></i>\\n' +\n    '        </span>\\n' +\n    '    </div>\\n' +\n    '</div>');\n\t }]);\nangular.module(\"lumx.select\").run(['$templateCache', function(a) { a.put('select.html', '<div class=\"lx-select\"\\n' +\n    '     ng-class=\"{ \\'lx-select--error\\': lxSelect.error,\\n' +\n    '                 \\'lx-select--fixed-label\\': lxSelect.fixedLabel && lxSelect.viewMode === \\'field\\',\\n' +\n    '                 \\'lx-select--is-active\\': (!lxSelect.multiple && lxSelect.getSelectedModel()) || (lxSelect.multiple && lxSelect.getSelectedModel().length),\\n' +\n    '                 \\'lx-select--is-disabled\\': lxSelect.ngDisabled,\\n' +\n    '                 \\'lx-select--is-multiple\\': lxSelect.multiple,\\n' +\n    '                 \\'lx-select--is-unique\\': !lxSelect.multiple,\\n' +\n    '                 \\'lx-select--theme-light\\': !lxSelect.theme || lxSelect.theme === \\'light\\',\\n' +\n    '                 \\'lx-select--theme-dark\\': lxSelect.theme === \\'dark\\',\\n' +\n    '                 \\'lx-select--valid\\': lxSelect.valid,\\n' +\n    '                 \\'lx-select--custom-style\\': lxSelect.customStyle,\\n' +\n    '                 \\'lx-select--default-style\\': !lxSelect.customStyle,\\n' +\n    '                 \\'lx-select--view-mode-field\\': !lxSelect.multiple || (lxSelect.multiple && lxSelect.viewMode === \\'field\\'),\\n' +\n    '                 \\'lx-select--view-mode-chips\\': lxSelect.multiple && lxSelect.viewMode === \\'chips\\',\\n' +\n    '                 \\'lx-select--autocomplete\\': lxSelect.autocomplete }\">\\n' +\n    '    <span class=\"lx-select-label\" ng-if=\"!lxSelect.autocomplete\">\\n' +\n    '        {{ ::lxSelect.label }}\\n' +\n    '    </span>\\n' +\n    '\\n' +\n    '    <lx-dropdown id=\"dropdown-{{ lxSelect.uuid }}\" lx-width=\"100%\" lx-effect=\"{{ lxSelect.autocomplete ? \\'none\\' : \\'expand\\' }}\">\\n' +\n    '        <ng-transclude></ng-transclude>\\n' +\n    '    </lx-dropdown>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('select-selected.html', '<div>\\n' +\n    '    <lx-dropdown-toggle ng-if=\"::!lxSelectSelected.parentCtrl.autocomplete\">\\n' +\n    '        <ng-include src=\"\\'select-selected-content.html\\'\"></ng-include>\\n' +\n    '    </lx-dropdown-toggle>\\n' +\n    '\\n' +\n    '    <ng-include src=\"\\'select-selected-content.html\\'\" ng-if=\"::lxSelectSelected.parentCtrl.autocomplete\"></ng-include>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('select-selected-content.html', '<div class=\"lx-select-selected-wrapper\" id=\"lx-select-selected-wrapper-{{ lxSelectSelected.parentCtrl.uuid }}\">\\n' +\n    '    <div class=\"lx-select-selected\" ng-if=\"!lxSelectSelected.parentCtrl.multiple && lxSelectSelected.parentCtrl.getSelectedModel()\">\\n' +\n    '        <span class=\"lx-select-selected__value\"\\n' +\n    '              ng-bind-html=\"lxSelectSelected.parentCtrl.displaySelected()\"></span>\\n' +\n    '\\n' +\n    '        <a class=\"lx-select-selected__clear\"\\n' +\n    '           ng-click=\"lxSelectSelected.clearModel($event)\"\\n' +\n    '           ng-if=\"::lxSelectSelected.parentCtrl.allowClear\">\\n' +\n    '            <i class=\"mdi mdi-close-circle\"></i>\\n' +\n    '        </a>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '    <div class=\"lx-select-selected\" ng-if=\"lxSelectSelected.parentCtrl.multiple\">\\n' +\n    '        <span class=\"lx-select-selected__tag\"\\n' +\n    '              ng-class=\"{ \\'lx-select-selected__tag--is-active\\': lxSelectSelected.parentCtrl.activeSelectedIndex === $index }\"\\n' +\n    '              ng-click=\"lxSelectSelected.removeSelected(selected, $event)\"\\n' +\n    '              ng-repeat=\"selected in lxSelectSelected.parentCtrl.getSelectedModel()\"\\n' +\n    '              ng-bind-html=\"lxSelectSelected.parentCtrl.displaySelected(selected)\"></span>\\n' +\n    '\\n' +\n    '        <input type=\"text\"\\n' +\n    '               placeholder=\"{{ ::lxSelectSelected.parentCtrl.label }}\"\\n' +\n    '               class=\"lx-select-selected__filter\"\\n' +\n    '               ng-model=\"lxSelectSelected.parentCtrl.filterModel\"\\n' +\n    '               ng-change=\"lxSelectSelected.parentCtrl.updateFilter()\"\\n' +\n    '               ng-keydown=\"lxSelectSelected.parentCtrl.keyEvent($event)\"\\n' +\n    '               ng-if=\"::lxSelectSelected.parentCtrl.autocomplete && !lxSelectSelected.parentCtrl.ngDisabled\">\\n' +\n    '    </div>\\n' +\n    '</div>');\n\ta.put('select-choices.html', '<lx-dropdown-menu class=\"lx-select-choices\"\\n' +\n    '                  ng-class=\"{ \\'lx-select-choices--custom-style\\': lxSelectChoices.parentCtrl.choicesCustomStyle,\\n' +\n    '                              \\'lx-select-choices--default-style\\': !lxSelectChoices.parentCtrl.choicesCustomStyle,\\n' +\n    '                              \\'lx-select-choices--is-multiple\\': lxSelectChoices.parentCtrl.multiple,\\n' +\n    '                              \\'lx-select-choices--is-unique\\': !lxSelectChoices.parentCtrl.multiple, }\">\\n' +\n    '    <ul>\\n' +\n    '        <li class=\"lx-select-choices__filter\" ng-if=\"::lxSelectChoices.parentCtrl.displayFilter && !lxSelectChoices.parentCtrl.autocomplete\">\\n' +\n    '            <lx-search-filter lx-dropdown-filter>\\n' +\n    '                <input type=\"text\" ng-model=\"lxSelectChoices.parentCtrl.filterModel\" ng-change=\"lxSelectChoices.parentCtrl.updateFilter()\">\\n' +\n    '            </lx-search-filter>\\n' +\n    '        </li>\\n' +\n    '        \\n' +\n    '        <div ng-if=\"::lxSelectChoices.isArray()\">\\n' +\n    '            <li class=\"lx-select-choices__choice\"\\n' +\n    '                ng-class=\"{ \\'lx-select-choices__choice--is-selected\\': lxSelectChoices.parentCtrl.isSelected(choice),\\n' +\n    '                            \\'lx-select-choices__choice--is-focus\\': lxSelectChoices.parentCtrl.activeChoiceIndex === $index }\"\\n' +\n    '                ng-repeat=\"choice in lxSelectChoices.parentCtrl.choices | filterChoices:lxSelectChoices.parentCtrl.filter:lxSelectChoices.parentCtrl.filterModel\"\\n' +\n    '                ng-bind-html=\"::lxSelectChoices.parentCtrl.displayChoice(choice)\"\\n' +\n    '                ng-click=\"lxSelectChoices.parentCtrl.toggleChoice(choice, $event)\"></li>\\n' +\n    '        </div>\\n' +\n    '\\n' +\n    '        <div ng-if=\"::!lxSelectChoices.isArray()\">\\n' +\n    '            <li class=\"lx-select-choices__subheader\"\\n' +\n    '                ng-repeat-start=\"(subheader, children) in lxSelectChoices.parentCtrl.choices\"\\n' +\n    '                ng-bind-html=\"::lxSelectChoices.parentCtrl.displaySubheader(subheader)\"></li>\\n' +\n    '\\n' +\n    '            <li class=\"lx-select-choices__choice\"\\n' +\n    '                ng-class=\"{ \\'lx-select-choices__choice--is-selected\\': lxSelectChoices.parentCtrl.isSelected(choice),\\n' +\n    '                            \\'lx-select-choices__choice--is-focus\\': lxSelectChoices.parentCtrl.activeChoiceIndex === $index }\"\\n' +\n    '                ng-repeat-end\\n' +\n    '                ng-repeat=\"choice in children | filterChoices:lxSelectChoices.parentCtrl.filter:lxSelectChoices.parentCtrl.filterModel\"\\n' +\n    '                ng-bind-html=\"::lxSelectChoices.parentCtrl.displayChoice(choice)\"\\n' +\n    '                ng-click=\"lxSelectChoices.parentCtrl.toggleChoice(choice, $event)\"></li>\\n' +\n    '        </div>\\n' +\n    '\\n' +\n    '        <li class=\"lx-select-choices__subheader\" ng-if=\"lxSelectChoices.parentCtrl.helper || !lxSelectChoices.parentCtrl.getFilteredChoices().length\">\\n' +\n    '            {{ lxSelectChoices.parentCtrl.helperMessage }}\\n' +\n    '        </li>\\n' +\n    '\\n' +\n    '        <li class=\"lx-select-choices__loader\" ng-if=\"lxSelectChoices.parentCtrl.loading\">\\n' +\n    '            <lx-progress lx-type=\"circular\" lx-color=\"primary\" lx-diameter=\"20\"></lx-progress>\\n' +\n    '        </li>\\n' +\n    '    </ul>\\n' +\n    '</lx-dropdown-menu>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.tabs\").run(['$templateCache', function(a) { a.put('tabs.html', '<div class=\"tabs tabs--layout-{{ lxTabs.layout }} tabs--theme-{{ lxTabs.theme }} tabs--color-{{ lxTabs.color }} tabs--indicator-{{ lxTabs.indicator }}\">\\n' +\n    '    <div class=\"tabs__links\">\\n' +\n    '        <a class=\"tabs__link\"\\n' +\n    '           ng-class=\"{ \\'tabs__link--is-active\\': lxTabs.tabIsActive(tab.index),\\n' +\n    '                       \\'tabs__link--is-disabled\\': tab.disabled }\"\\n' +\n    '           ng-repeat=\"tab in lxTabs.tabs\"\\n' +\n    '           ng-click=\"lxTabs.setActiveTab(tab)\"\\n' +\n    '           lx-ripple>\\n' +\n    '           <i class=\"mdi mdi-{{ tab.icon }}\" ng-if=\"tab.icon\"></i>\\n' +\n    '           <span ng-if=\"tab.label\">{{ tab.label }}</span>\\n' +\n    '        </a>\\n' +\n    '    </div>\\n' +\n    '    \\n' +\n    '    <div class=\"tabs__panes\" ng-if=\"lxTabs.viewMode === \\'gather\\'\" ng-transclude></div>\\n' +\n    '    <div class=\"tabs__indicator\"></div>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('tabs-panes.html', '<div class=\"tabs\">\\n' +\n    '    <div class=\"tabs__panes\" ng-transclude></div>\\n' +\n    '</div>');\n\ta.put('tab.html', '<div class=\"tabs__pane\" ng-class=\"{ \\'tabs__pane--is-disabled\\': lxTab.ngDisabled }\">\\n' +\n    '    <div ng-if=\"lxTab.tabIsActive()\" ng-transclude></div>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('tab-pane.html', '<div class=\"tabs__pane\" ng-transclude></div>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.date-picker\").run(['$templateCache', function(a) { a.put('date-picker.html', '<div class=\"lx-date\">\\n' +\n    '    <!-- Date picker input -->\\n' +\n    '    <div class=\"lx-date-input\" ng-click=\"lxDatePicker.openDatePicker()\" ng-if=\"lxDatePicker.hasInput\">\\n' +\n    '        <ng-transclude></ng-transclude>\\n' +\n    '    </div>\\n' +\n    '    \\n' +\n    '    <!-- Date picker -->\\n' +\n    '    <div class=\"lx-date-picker lx-date-picker--{{ lxDatePicker.color }}\">\\n' +\n    '        <div ng-if=\"lxDatePicker.isOpen\">\\n' +\n    '            <!-- Date picker: header -->\\n' +\n    '            <div class=\"lx-date-picker__header\">\\n' +\n    '                <a class=\"lx-date-picker__current-year\"\\n' +\n    '                   ng-class=\"{ \\'lx-date-picker__current-year--is-active\\': lxDatePicker.yearSelection }\"\\n' +\n    '                   ng-click=\"lxDatePicker.displayYearSelection()\">\\n' +\n    '                    {{ lxDatePicker.moment(lxDatePicker.ngModel).format(\\'YYYY\\') }}\\n' +\n    '                </a>\\n' +\n    '\\n' +\n    '                <a class=\"lx-date-picker__current-date\"\\n' +\n    '                   ng-class=\"{ \\'lx-date-picker__current-date--is-active\\': !lxDatePicker.yearSelection }\"\\n' +\n    '                   ng-click=\"lxDatePicker.hideYearSelection()\">\\n' +\n    '                    {{ lxDatePicker.getDateFormatted() }}\\n' +\n    '                </a>\\n' +\n    '            </div>\\n' +\n    '            \\n' +\n    '            <!-- Date picker: content -->\\n' +\n    '            <div class=\"lx-date-picker__content\">\\n' +\n    '                <!-- Calendar -->\\n' +\n    '                <div class=\"lx-date-picker__calendar\" ng-if=\"!lxDatePicker.yearSelection\">\\n' +\n    '                    <div class=\"lx-date-picker__nav\">\\n' +\n    '                        <lx-button lx-size=\"l\" lx-color=\"black\" lx-type=\"icon\" ng-click=\"lxDatePicker.previousMonth()\">\\n' +\n    '                            <i class=\"mdi mdi-chevron-left\"></i>\\n' +\n    '                        </lx-button>\\n' +\n    '\\n' +\n    '                        <span>{{ lxDatePicker.ngModelMoment.format(\\'MMMM YYYY\\') }}</span>\\n' +\n    '                        \\n' +\n    '                        <lx-button lx-size=\"l\" lx-color=\"black\" lx-type=\"icon\" ng-click=\"lxDatePicker.nextMonth()\">\\n' +\n    '                            <i class=\"mdi mdi-chevron-right\"></i>\\n' +\n    '                        </lx-button>\\n' +\n    '                    </div>\\n' +\n    '\\n' +\n    '                    <div class=\"lx-date-picker__days-of-week\">\\n' +\n    '                        <span ng-repeat=\"day in lxDatePicker.daysOfWeek\">{{ day }}</span>\\n' +\n    '                    </div>\\n' +\n    '\\n' +\n    '                    <div class=\"lx-date-picker__days\">\\n' +\n    '                        <span class=\"lx-date-picker__day lx-date-picker__day--is-empty\"\\n' +\n    '                              ng-repeat=\"x in lxDatePicker.emptyFirstDays\">&nbsp;</span>\\n' +\n    '\\n' +\n    '                        <div class=\"lx-date-picker__day\"\\n' +\n    '                             ng-class=\"{ \\'lx-date-picker__day--is-selected\\': day.selected,\\n' +\n    '                                         \\'lx-date-picker__day--is-today\\': day.today && !day.selected,\\n' +\n    '                                         \\'lx-date-picker__day--is-disabled\\': day.disabled }\"\\n' +\n    '                             ng-repeat=\"day in lxDatePicker.days\">\\n' +\n    '                            <a ng-click=\"lxDatePicker.select(day)\">{{ day ? day.format(\\'D\\') : \\'\\' }}</a>\\n' +\n    '                        </div>\\n' +\n    '\\n' +\n    '                        <span class=\"lx-date-picker__day lx-date-picker__day--is-empty\"\\n' +\n    '                              ng-repeat=\"x in lxDatePicker.emptyLastDays\">&nbsp;</span>\\n' +\n    '                    </div>\\n' +\n    '                </div>\\n' +\n    '\\n' +\n    '                <!-- Year selection -->\\n' +\n    '                <div class=\"lx-date-picker__year-selector\" ng-if=\"lxDatePicker.yearSelection\">\\n' +\n    '                    <a class=\"lx-date-picker__year\"\\n' +\n    '                         ng-class=\"{ \\'lx-date-picker__year--is-active\\': year == lxDatePicker.moment(lxDatePicker.ngModel).format(\\'YYYY\\') }\"\\n' +\n    '                         ng-repeat=\"year in lxDatePicker.years\"\\n' +\n    '                         ng-click=\"lxDatePicker.selectYear(year)\"\\n' +\n    '                         ng-if=\"lxDatePicker.yearSelection\">\\n' +\n    '                        {{ year }}\\n' +\n    '                    </a>\\n' +\n    '                </div>\\n' +\n    '            </div>\\n' +\n    '\\n' +\n    '            <!-- Actions -->\\n' +\n    '            <div class=\"lx-date-picker__actions\">\\n' +\n    '                <lx-button lx-color=\"{{ lxDatePicker.color }}\" lx-type=\"flat\" ng-click=\"lxDatePicker.closeDatePicker()\">\\n' +\n    '                    Ok\\n' +\n    '                </lx-button>\\n' +\n    '            </div>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '</div>');\n\t }]);\nangular.module(\"lumx.progress\").run(['$templateCache', function(a) { a.put('progress.html', '<div class=\"progress-container progress-container--{{ lxProgress.lxType }} progress-container--{{ lxProgress.lxColor }}\"\\n' +\n    '     ng-class=\"{ \\'progress-container--determinate\\': lxProgress.lxValue,\\n' +\n    '                 \\'progress-container--indeterminate\\': !lxProgress.lxValue }\">\\n' +\n    '    <div class=\"progress-circular\"\\n' +\n    '         ng-if=\"lxProgress.lxType === \\'circular\\'\"\\n' +\n    '         ng-style=\"lxProgress.getProgressDiameter()\">\\n' +\n    '        <svg class=\"progress-circular__svg\">\\n' +\n    '            <circle class=\"progress-circular__path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"4\" stroke-miterlimit=\"10\" ng-style=\"lxProgress.getCircularProgressValue()\">\\n' +\n    '        </svg>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '    <div class=\"progress-linear\" ng-if=\"lxProgress.lxType === \\'linear\\'\">\\n' +\n    '        <div class=\"progress-linear__background\"></div>\\n' +\n    '        <div class=\"progress-linear__bar progress-linear__bar--first\" ng-style=\"lxProgress.getLinearProgressValue()\"></div>\\n' +\n    '        <div class=\"progress-linear__bar progress-linear__bar--second\"></div>\\n' +\n    '    </div>\\n' +\n    '</div>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.button\").run(['$templateCache', function(a) { a.put('link.html', '<a ng-transclude lx-ripple></a>\\n' +\n    '');\n\ta.put('button.html', '<button ng-transclude lx-ripple></button>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.checkbox\").run(['$templateCache', function(a) { a.put('checkbox.html', '<div class=\"checkbox checkbox--{{ lxCheckbox.lxColor }}\">\\n' +\n    '    <input id=\"{{ lxCheckbox.getCheckboxId() }}\"\\n' +\n    '           type=\"checkbox\"\\n' +\n    '           class=\"checkbox__input\"\\n' +\n    '           name=\"{{ lxCheckbox.name }}\"\\n' +\n    '           ng-model=\"lxCheckbox.ngModel\"\\n' +\n    '           ng-true-value=\"{{ lxCheckbox.ngTrueValue }}\"\\n' +\n    '           ng-false-value=\"{{ lxCheckbox.ngFalseValue }}\"\\n' +\n    '           ng-change=\"lxCheckbox.triggerNgChange()\"\\n' +\n    '           ng-disabled=\"lxCheckbox.ngDisabled\">\\n' +\n    '\\n' +\n    '    <label for=\"{{ lxCheckbox.getCheckboxId() }}\" class=\"checkbox__label\" ng-transclude ng-if=\"!lxCheckbox.getCheckboxHasChildren()\"></label>\\n' +\n    '    <ng-transclude-replace ng-if=\"lxCheckbox.getCheckboxHasChildren()\"></ng-transclude-replace>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('checkbox-label.html', '<label for=\"{{ lxCheckboxLabel.getCheckboxId() }}\" class=\"checkbox__label\" ng-transclude></label>\\n' +\n    '');\n\ta.put('checkbox-help.html', '<span class=\"checkbox__help\" ng-transclude></span>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.radio-button\").run(['$templateCache', function(a) { a.put('radio-group.html', '<div class=\"radio-group\" ng-transclude></div>\\n' +\n    '');\n\ta.put('radio-button.html', '<div class=\"radio-button radio-button--{{ lxRadioButton.lxColor }}\">\\n' +\n    '    <input id=\"{{ lxRadioButton.getRadioButtonId() }}\"\\n' +\n    '           type=\"radio\"\\n' +\n    '           class=\"radio-button__input\"\\n' +\n    '           name=\"{{ lxRadioButton.name }}\"\\n' +\n    '           ng-model=\"lxRadioButton.ngModel\"\\n' +\n    '           ng-value=\"lxRadioButton.ngValue\"\\n' +\n    '           ng-change=\"lxRadioButton.triggerNgChange()\"\\n' +\n    '           ng-disabled=\"lxRadioButton.ngDisabled\">\\n' +\n    '\\n' +\n    '    <label for=\"{{ lxRadioButton.getRadioButtonId() }}\" class=\"radio-button__label\" ng-transclude ng-if=\"!lxRadioButton.getRadioButtonHasChildren()\"></label>\\n' +\n    '    <ng-transclude-replace ng-if=\"lxRadioButton.getRadioButtonHasChildren()\"></ng-transclude-replace>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('radio-button-label.html', '<label for=\"{{ lxRadioButtonLabel.getRadioButtonId() }}\" class=\"radio-button__label\" ng-transclude></label>\\n' +\n    '');\n\ta.put('radio-button-help.html', '<span class=\"radio-button__help\" ng-transclude></span>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.switch\").run(['$templateCache', function(a) { a.put('switch.html', '<div class=\"switch switch--{{ lxSwitch.lxColor }}\">\\n' +\n    '    <input id=\"{{ lxSwitch.getSwitchId() }}\"\\n' +\n    '           type=\"checkbox\"\\n' +\n    '           class=\"switch__input\"\\n' +\n    '           name=\"{{ lxSwitch.name }}\"\\n' +\n    '           ng-model=\"lxSwitch.ngModel\"\\n' +\n    '           ng-true-value=\"{{ lxSwitch.ngTrueValue }}\"\\n' +\n    '           ng-false-value=\"{{ lxSwitch.ngFalseValue }}\"\\n' +\n    '           ng-change=\"lxSwitch.triggerNgChange()\"\\n' +\n    '           ng-disabled=\"lxSwitch.ngDisabled\">\\n' +\n    '\\n' +\n    '    <label for=\"{{ lxSwitch.getSwitchId() }}\" class=\"switch__label\" ng-transclude ng-if=\"!lxSwitch.getSwitchHasChildren()\"></label>\\n' +\n    '    <ng-transclude-replace ng-if=\"lxSwitch.getSwitchHasChildren()\"></ng-transclude-replace>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('switch-label.html', '<label for=\"{{ lxSwitchLabel.getSwitchId() }}\" class=\"switch__label\" ng-transclude></label>\\n' +\n    '');\n\ta.put('switch-help.html', '<span class=\"switch__help\" ng-transclude></span>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.fab\").run(['$templateCache', function(a) { a.put('fab.html', '<div class=\"fab\">\\n' +\n    '    <ng-transclude-replace></ng-transclude-replace>\\n' +\n    '</div>\\n' +\n    '');\n\ta.put('fab-trigger.html', '<div class=\"fab__primary\" ng-transclude></div>\\n' +\n    '');\n\ta.put('fab-actions.html', '<div class=\"fab__actions fab__actions--{{ parentCtrl.lxDirection }}\" ng-transclude></div>\\n' +\n    '');\n\t }]);\nangular.module(\"lumx.icon\").run(['$templateCache', function(a) { a.put('icon.html', '<i class=\"icon mdi\" ng-class=\"lxIcon.getClass()\"></i>');\n\t }]);\nangular.module(\"lumx.data-table\").run(['$templateCache', function(a) { a.put('data-table.html', '<div class=\"data-table-container\">\\n' +\n    '    <table class=\"data-table\"\\n' +\n    '           ng-class=\"{ \\'data-table--no-border\\': !lxDataTable.border,\\n' +\n    '                       \\'data-table--thumbnail\\': lxDataTable.thumbnail }\">\\n' +\n    '        <thead>\\n' +\n    '            <tr ng-class=\"{ \\'data-table__selectable-row\\': lxDataTable.selectable,\\n' +\n    '                            \\'data-table__selectable-row--is-selected\\': lxDataTable.selectable && lxDataTable.allRowsSelected }\">\\n' +\n    '                <th ng-if=\"lxDataTable.thumbnail\"></th>\\n' +\n    '                <th ng-click=\"lxDataTable.toggleAllSelected()\"\\n' +\n    '                    ng-if=\"lxDataTable.selectable\"></th>\\n' +\n    '                <th ng-class=\" { \\'data-table__sortable-cell\\': th.sortable,\\n' +\n    '                                 \\'data-table__sortable-cell--asc\\': th.sortable && th.sort === \\'asc\\',\\n' +\n    '                                 \\'data-table__sortable-cell--desc\\': th.sortable && th.sort === \\'desc\\' }\"\\n' +\n    '                    ng-click=\"lxDataTable.sort(th)\"\\n' +\n    '                    ng-repeat=\"th in lxDataTable.thead track by $index\"\\n' +\n    '                    ng-if=\"!lxDataTable.thumbnail || (lxDataTable.thumbnail && $index != 0)\">\\n' +\n    '                    <lx-icon lx-id=\"{{ th.icon }}\" ng-if=\"th.icon\"></lx-icon>\\n' +\n    '                    <span>{{ th.label }}</span>\\n' +\n    '                </th>\\n' +\n    '            </tr>\\n' +\n    '        </thead>\\n' +\n    '\\n' +\n    '        <tbody>\\n' +\n    '            <tr ng-class=\"{ \\'data-table__selectable-row\\': lxDataTable.selectable,\\n' +\n    '                            \\'data-table__selectable-row--is-disabled\\': lxDataTable.selectable && tr.lxDataTableDisabled,\\n' +\n    '                            \\'data-table__selectable-row--is-selected\\': lxDataTable.selectable && tr.lxDataTableSelected }\"\\n' +\n    '                ng-repeat=\"tr in lxDataTable.tbody\"\\n' +\n    '                ng-click=\"lxDataTable.toggle(tr)\">\\n' +\n    '                <td ng-if=\"lxDataTable.thumbnail\">\\n' +\n    '                    <div ng-if=\"lxDataTable.thead[0].format\" ng-bind-html=\"lxDataTable.$sce.trustAsHtml(lxDataTable.thead[0].format(tr))\"></div>\\n' +\n    '                </td>\\n' +\n    '                <td ng-if=\"lxDataTable.selectable\"></td>\\n' +\n    '                <td ng-repeat=\"th in lxDataTable.thead track by $index\"\\n' +\n    '                    ng-if=\"!lxDataTable.thumbnail || (lxDataTable.thumbnail && $index != 0)\">\\n' +\n    '                    <span ng-if=\"!th.format\">{{ tr[th.name] }}</span>\\n' +\n    '                    <div ng-if=\"th.format\" ng-bind-html=\"lxDataTable.$sce.trustAsHtml(th.format(tr))\"></div>\\n' +\n    '                </td>\\n' +\n    '            </tr>\\n' +\n    '        </tbody>\\n' +\n    '    </table>\\n' +\n    '</div>');\n\t }]);"]}